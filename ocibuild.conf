runnerTag: latest
name: terraform-provider-oci
team: Terraform Provider OCI
phoneBookId: terraform
description: Terraform Provider OCI
majorversion: 0
minorversion: 1
shortversion: ${majorversion}.${minorversion}
snapshotVersion: ${shortversion}-SNAPSHOT
# BLD_NUMBER contains the build number of this build, which is automatically incremented for each successive build in each branch.
# BLD_BRANCH_SUFFIX is the branch name with a leading hyphen. For instance, if your branch name is foo, then the BLD_BRANCH_SUFFIX would be -foo.
# If your branch is master, the BLD_BRANCH_SUFFIX would be null.
version: ${shortversion}${?BLD_BRANCH_SUFFIX}.${BLD_NUMBER}
# A list of branch names, including special branch name 'pull-requests'.  Determines which branches will trigger on
# commit to bitbucket.
triggerOnCommitBranches : ["*"]
# A list of branch names that should run all defined build steps including those which publish artifacts.
# If a branch is not included in the list, it will be a 'dry-run' build and skips any steps that push dependencies,
# runs scanners, or notifies other services, such as pipelines.
releaseBranches: ["publish_artifact"]

## Build Service Slack Notification ##
sendNotificationBranches:  ["master", "provider_preview"]
slackChannels: ["#oci_rmsdp_provider"]
# Compartment id which build service will use to do authorization to restrict UI access in build service
authCompartmentOcid: "ocid1.compartment.oc1..aaaaaaaayowcmwbljnoub4fyirytbmpbksw5k4qvdegy6syxnmcqmufhgy7a"

pipelineId: "ocid1.devopsbuildpipeline.oc1.phx.amaaaaaajcdxrhqavdtcbbp4n5oootmo3gteqxvsgglmg3g3qlt3vfdg7roq"
steps:
  [
    {
      name: git_clone
      type: git
      buildTimeout: 25
      gitCloneType: "shallow"
      cloneSubmodules: "true"
      environment: {
          "https_proxy": "http://www-proxy.us.oracle.com:80",
          "http_proxy": "http://www-proxy.us.oracle.com:80",
          "no_proxy": "127.0.0.0,localhost,us.oracle.com,oraclecorp.com"
      }
      artifacts: [ "**" ]
    },
    {
      name: go_install
      type: golang
      dependsOn: [git_clone]
      environment: {
        "GOFLAGS": "-mod=vendor",
        "GO111MODULE": "on"
      }
      goVersion: "1.21.13"
      goCommands: [
        {
          command: "install"
        }
      ]
      artifacts: [
        "**"
      ]
    },
    {
      name: unit_test_with_code_coverage
      type: golang
      dependsOn: [git_clone]
      environment: {
        "GOFLAGS": "-mod=vendor",
        "GO111MODULE": "on"
      }
      compartmentOcid: "ocid1.compartment.oc1..aaaaaaaapq5mkp2y2umggvc3qx4wcdno3gxbhlrqp444ydwzhyjr46jj47cq"
      secrets: [
              { envVarName: "OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM", secretServicePath: "secret/terraform-provider/unittest_oci_resource_principal_private_pem/latest"},
              { envVarName: "OCI_RESOURCE_PRINCIPAL_RPST", secretServicePath: "/secret/terraform-provider/unittest_oci_resource_principal_rpst/latest"}
            ]
      goVersion: "1.21.13"
      goCommands: [
        {
          command: "test ./..."
          args: "-run TestUnit -coverprofile cover.out"
        },
        {
           command: "tool cover"
           args: "-html=cover.out -o coverage.html"
        },
        {
           command: "tool cover"
           args: "-func cover.out -o coverage/coverage.txt"
        }
      ]
      testCoverageLocation : "coverage/coverage.txt"
      artifacts: [
        "**"
      ]
    },
    {
      dependsOn: unit_test_with_code_coverage
      name: code_coverage_enforcement
      type: golang
      runnerImage: "build-runner-golang-boring-ssl"
      environment: {
        "CHECK_COVERAGE": "true"
      }
      goVersion: "1.21.13"
      goCommands: [
        {
          command: "test coverage/coverage_test.go"
          args: "-v -mod vendor"
        }
      ]
      artifacts: [
        "**"
      ]
    },
     {
       name: build-terraform-providers-amd64
       dependsOn: [unit_test_with_code_coverage]
       type: golang
       goVersion: 1.21.13
       environment:
          {
            "GOFLAGS": "-mod=vendor",
            "GO111MODULE": "",
            "GOARCH"="amd64",
            "GOOS"="linux",
            "CGO_ENABLED"="0"
          }
       goCommands:
          [
            {
              command: "build",
              args:  "-v" "-ldflags='-s'" "-o linux_amd64/terraform-provider-oci_v"${version}
            }
          ]
       artifacts:
          [
            "linux_amd64/terraform-provider-oci_v"${version}
          ]
     },
     {
         name: build-terraform-providers-arm64
         dependsOn: [unit_test_with_code_coverage]
         type: golang
         goVersion: 1.21.13
         environment:
         {
            "GOFLAGS": "-mod=vendor",
            "GO111MODULE": "",
            "GOARCH"="arm64",
            "GOOS"="linux",
            "CGO_ENABLED"="0"
            }
         goCommands:
            [
              {
                command: "build",
                args:  "-v" "-ldflags='-s '" "-o linux_arm64/terraform-provider-oci_v"${version}
              }
            ]
         artifacts:
            [
              "linux_arm64/terraform-provider-oci_v"${version}
            ]
       },
       {
         name: publish_shepherd_providers
         dependsOn: [build-terraform-providers-amd64, build-terraform-providers-arm64]
         type: publishGeneric
         repository: odo-artifacts-signed-generic-local
         filePathsToPublish:
         [
           {
             localFile: "linux_amd64/terraform-provider-oci_v"${version},
             targetDir: "shepherd/terraform-providers/linux_amd64"
           },
            {
              localFile: "linux_arm64/terraform-provider-oci_v"${version},
               targetDir: "shepherd/terraform-providers/linux_arm64"
            }
             ]
     }
  ]