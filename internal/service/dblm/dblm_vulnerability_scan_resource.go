// Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package dblm

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	oci_common "github.com/oracle/oci-go-sdk/v65/common"
	oci_dblm "github.com/oracle/oci-go-sdk/v65/dblm"

	"github.com/oracle/terraform-provider-oci/internal/client"
	"github.com/oracle/terraform-provider-oci/internal/tfresource"
)

func DblmVulnerabilityScanResource() *schema.Resource {
	return &schema.Resource{
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Timeouts: tfresource.DefaultTimeout,
		Create:   createDblmVulnerabilityScan,
		Read:     readDblmVulnerabilityScan,
		Delete:   deleteDblmVulnerabilityScan,
		Schema: map[string]*schema.Schema{
			// Required
			"compartment_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},
			"vulnerability_scan_type": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			// Optional

			// Computed
			"defined_tags": {
				Type:     schema.TypeMap,
				Computed: true,
				Elem:     schema.TypeString,
			},
			"display_name": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"freeform_tags": {
				Type:     schema.TypeMap,
				Computed: true,
				Elem:     schema.TypeString,
			},
			"state": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"system_tags": {
				Type:     schema.TypeMap,
				Computed: true,
				Elem:     schema.TypeString,
			},
			"time_created": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"time_ended": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"vulnerability_scan_message": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"vulnerability_scan_status": {
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func createDblmVulnerabilityScan(d *schema.ResourceData, m interface{}) error {
	sync := &DblmVulnerabilityScanResourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).DbLifeCycleManagementClient()

	return tfresource.CreateResource(d, sync)
}

func readDblmVulnerabilityScan(d *schema.ResourceData, m interface{}) error {
	sync := &DblmVulnerabilityScanResourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).DbLifeCycleManagementClient()

	return tfresource.ReadResource(sync)
}

func deleteDblmVulnerabilityScan(d *schema.ResourceData, m interface{}) error {
	return nil
}

type DblmVulnerabilityScanResourceCrud struct {
	tfresource.BaseCrud
	Client                 *oci_dblm.DbLifeCycleManagementClient
	Res                    *oci_dblm.VulnerabilityScan
	DisableNotFoundRetries bool
}

func (s *DblmVulnerabilityScanResourceCrud) ID() string {
	return *s.Res.Id
}

func (s *DblmVulnerabilityScanResourceCrud) CreatedPending() []string {
	return []string{
		string(oci_dblm.VulnerabilityScanLifecycleStateCreating),
	}
}

func (s *DblmVulnerabilityScanResourceCrud) CreatedTarget() []string {
	return []string{
		string(oci_dblm.VulnerabilityScanLifecycleStateActive),
	}
}

func (s *DblmVulnerabilityScanResourceCrud) DeletedPending() []string {
	return []string{
		string(oci_dblm.VulnerabilityScanLifecycleStateDeleting),
	}
}

func (s *DblmVulnerabilityScanResourceCrud) DeletedTarget() []string {
	return []string{
		string(oci_dblm.VulnerabilityScanLifecycleStateDeleted),
	}
}

func (s *DblmVulnerabilityScanResourceCrud) Create() error {
	request := oci_dblm.CreateVulnerabilityScanRequest{}

	if compartmentId, ok := s.D.GetOkExists("compartment_id"); ok {
		tmp := compartmentId.(string)
		request.CompartmentId = &tmp
	}

	if vulnerabilityScanType, ok := s.D.GetOkExists("vulnerability_scan_type"); ok {
		request.VulnerabilityScanType = oci_dblm.VulnerabilityScanVulnerabilityScanTypeEnum(vulnerabilityScanType.(string))
	}

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "dblm")

	response, err := s.Client.CreateVulnerabilityScan(context.Background(), request)
	if err != nil {
		return err
	}

	workId := response.OpcWorkRequestId
	var identifier *string
	identifier = response.Id
	if identifier != nil {
		s.D.SetId(*identifier)
	}
	return s.getVulnerabilityScanFromWorkRequest(workId, tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "dblm"), oci_dblm.ActionTypeCreated, s.D.Timeout(schema.TimeoutCreate))
}

func (s *DblmVulnerabilityScanResourceCrud) getVulnerabilityScanFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_dblm.ActionTypeEnum, timeout time.Duration) error {

	// Wait until it finishes
	vulnerabilityScanId, err := vulnerabilityScanWaitForWorkRequest(workId, "vulnerabilityscan",
		actionTypeEnum, timeout, s.DisableNotFoundRetries, s.Client)

	if err != nil {
		return err
	}
	s.D.SetId(*vulnerabilityScanId)

	return s.Get()
}

func vulnerabilityScanWorkRequestShouldRetryFunc(timeout time.Duration) func(response oci_common.OCIOperationResponse) bool {
	startTime := time.Now()
	stopTime := startTime.Add(timeout)
	return func(response oci_common.OCIOperationResponse) bool {

		// Stop after timeout has elapsed
		if time.Now().After(stopTime) {
			return false
		}

		// Make sure we stop on default rules
		if tfresource.ShouldRetry(response, false, "dblm", startTime) {
			return true
		}

		// Only stop if the time Finished is set
		if workRequestResponse, ok := response.Response.(oci_dblm.GetWorkRequestResponse); ok {
			return workRequestResponse.TimeFinished == nil
		}
		return false
	}
}

func vulnerabilityScanWaitForWorkRequest(wId *string, entityType string, action oci_dblm.ActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_dblm.DbLifeCycleManagementClient) (*string, error) {
	retryPolicy := tfresource.GetRetryPolicy(disableFoundRetries, "dblm")
	retryPolicy.ShouldRetryOperation = vulnerabilityScanWorkRequestShouldRetryFunc(timeout)

	response := oci_dblm.GetWorkRequestResponse{}
	stateConf := &retry.StateChangeConf{
		Pending: []string{
			string(oci_dblm.OperationStatusInProgress),
			string(oci_dblm.OperationStatusAccepted),
			string(oci_dblm.OperationStatusCanceling),
		},
		Target: []string{
			string(oci_dblm.OperationStatusSucceeded),
			string(oci_dblm.OperationStatusFailed),
			string(oci_dblm.OperationStatusCanceled),
		},
		Refresh: func() (interface{}, string, error) {
			var err error
			response, err = client.GetWorkRequest(context.Background(),
				oci_dblm.GetWorkRequestRequest{
					WorkRequestId: wId,
					RequestMetadata: oci_common.RequestMetadata{
						RetryPolicy: retryPolicy,
					},
				})
			wr := &response.WorkRequest
			return wr, string(wr.Status), err
		},
		Timeout: timeout,
	}
	if _, e := stateConf.WaitForState(); e != nil {
		return nil, e
	}

	var identifier *string
	// The work request response contains an array of objects that finished the operation
	for _, res := range response.Resources {
		if strings.Contains(strings.ToLower(*res.EntityType), entityType) {
			if res.ActionType == action {
				identifier = res.Identifier
				break
			}
		}
	}

	// The workrequest may have failed, check for errors if identifier is not found or work failed or got cancelled
	if identifier == nil || response.Status == oci_dblm.OperationStatusFailed || response.Status == oci_dblm.OperationStatusCanceled {
		return nil, getErrorFromDblmVulnerabilityScanWorkRequest(client, wId, retryPolicy, entityType, action)
	}

	return identifier, nil
}

func getErrorFromDblmVulnerabilityScanWorkRequest(client *oci_dblm.DbLifeCycleManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_dblm.ActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
		oci_dblm.ListWorkRequestErrorsRequest{
			WorkRequestId: workId,
			RequestMetadata: oci_common.RequestMetadata{
				RetryPolicy: retryPolicy,
			},
		})
	if err != nil {
		return err
	}

	allErrs := make([]string, 0)
	for _, wrkErr := range response.Items {
		allErrs = append(allErrs, *wrkErr.Message)
	}
	errorMessage := strings.Join(allErrs, "\n")

	workRequestErr := fmt.Errorf("work request did not succeed, workId: %s, entity: %s, action: %s. Message: %s", *workId, entityType, action, errorMessage)

	return workRequestErr
}

func (s *DblmVulnerabilityScanResourceCrud) Get() error {
	request := oci_dblm.GetVulnerabilityScanRequest{}

	tmp := s.D.Id()
	request.VulnerabilityScanId = &tmp

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "dblm")

	response, err := s.Client.GetVulnerabilityScan(context.Background(), request)
	if err != nil {
		return err
	}

	s.Res = &response.VulnerabilityScan
	return nil
}

func (s *DblmVulnerabilityScanResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
		s.D.Set("compartment_id", *s.Res.CompartmentId)
	}

	if s.Res.DefinedTags != nil {
		s.D.Set("defined_tags", tfresource.DefinedTagsToMap(s.Res.DefinedTags))
	}

	if s.Res.DisplayName != nil {
		s.D.Set("display_name", *s.Res.DisplayName)
	}

	s.D.Set("freeform_tags", s.Res.FreeformTags)

	s.D.Set("state", s.Res.LifecycleState)

	if s.Res.SystemTags != nil {
		s.D.Set("system_tags", tfresource.SystemTagsToMap(s.Res.SystemTags))
	}

	if s.Res.TimeCreated != nil {
		s.D.Set("time_created", s.Res.TimeCreated.String())
	}

	if s.Res.TimeEnded != nil {
		s.D.Set("time_ended", s.Res.TimeEnded.String())
	}

	if s.Res.VulnerabilityScanMessage != nil {
		s.D.Set("vulnerability_scan_message", *s.Res.VulnerabilityScanMessage)
	}

	s.D.Set("vulnerability_scan_status", s.Res.VulnerabilityScanStatus)

	s.D.Set("vulnerability_scan_type", s.Res.VulnerabilityScanType)

	return nil
}

func VulnerabilityScanSummaryToMap(obj oci_dblm.VulnerabilityScanSummary) map[string]interface{} {
	result := map[string]interface{}{}

	if obj.CompartmentId != nil {
		result["compartment_id"] = string(*obj.CompartmentId)
	}

	if obj.DefinedTags != nil {
		result["defined_tags"] = tfresource.DefinedTagsToMap(obj.DefinedTags)
	}

	if obj.DisplayName != nil {
		result["display_name"] = string(*obj.DisplayName)
	}

	result["freeform_tags"] = obj.FreeformTags

	if obj.Id != nil {
		result["id"] = string(*obj.Id)
	}

	result["state"] = string(obj.LifecycleState)

	if obj.SystemTags != nil {
		result["system_tags"] = tfresource.SystemTagsToMap(obj.SystemTags)
	}

	if obj.TimeCreated != nil {
		result["time_created"] = obj.TimeCreated.String()
	}

	if obj.TimeEnded != nil {
		result["time_ended"] = obj.TimeEnded.String()
	}

	if obj.VulnerabilityScanMessage != nil {
		result["vulnerability_scan_message"] = string(*obj.VulnerabilityScanMessage)
	}

	result["vulnerability_scan_status"] = string(obj.VulnerabilityScanStatus)

	result["vulnerability_scan_type"] = string(obj.VulnerabilityScanType)

	return result
}
