// Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package dblm

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	oci_dblm "github.com/oracle/oci-go-sdk/v65/dblm"

	"github.com/oracle/terraform-provider-oci/internal/client"
	"github.com/oracle/terraform-provider-oci/internal/tfresource"
)

func DblmVulnerabilityResourcesDataSource() *schema.Resource {
	return &schema.Resource{
		Read: readDblmVulnerabilityResources,
		Schema: map[string]*schema.Schema{
			"filter": tfresource.DataSourceFiltersSchema(),
			"compartment_id": {
				Type:     schema.TypeString,
				Required: true,
			},
			"cve_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"database_release": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"display_name": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"patch_recommendation": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"severity_type": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"state": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"vulnerability_resource_collection": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						// Required

						// Optional

						// Computed
						"items": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									// Required

									// Optional

									// Computed
									"child_pdbs": {
										Type:     schema.TypeList,
										Computed: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												// Required

												// Optional

												// Computed
												"last_changed_by": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"name": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"open_mode": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"pdb_id": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"recovery_status": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"restricted": {
													Type:     schema.TypeString,
													Computed: true,
												},
											},
										},
									},
									"id": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"image_id": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"metric_errors": {
										Type:     schema.TypeList,
										Computed: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												// Required

												// Optional

												// Computed
												"content_type": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"data": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"error_type": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"level": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"subject": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"time_generated": {
													Type:     schema.TypeString,
													Computed: true,
												},
											},
										},
									},
									"name": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"patch_recommendations_details": {
										Type:     schema.TypeList,
										Computed: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												// Required

												// Optional

												// Computed
												"abstract_text": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"classification_name": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"has_fix_for_cve": {
													Type:     schema.TypeBool,
													Computed: true,
												},
												"patch_name": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"time_evaluated": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"time_released": {
													Type:     schema.TypeString,
													Computed: true,
												},
											},
										},
									},
									"patch_recommendations_summary": {
										Type:     schema.TypeList,
										Computed: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												// Required

												// Optional

												// Computed
												"total": {
													Type:     schema.TypeInt,
													Computed: true,
												},
												"up_to_date": {
													Type:     schema.TypeInt,
													Computed: true,
												},
												"patch_available": {
													Type:     schema.TypeInt,
													Computed: true,
												},
											},
										},
									},
									"platform": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"release": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"subscribed_image": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"time_config_collected": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"time_scan_ended": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"version": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"vulnerabilities_summary": {
										Type:     schema.TypeList,
										Computed: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												// Required

												// Optional

												// Computed
												"total": {
													Type:     schema.TypeInt,
													Computed: true,
												},
												"critical": {
													Type:     schema.TypeInt,
													Computed: true,
												},
												"high": {
													Type:     schema.TypeInt,
													Computed: true,
												},
												"medium": {
													Type:     schema.TypeInt,
													Computed: true,
												},
												"info": {
													Type:     schema.TypeInt,
													Computed: true,
												},
												"low": {
													Type:     schema.TypeInt,
													Computed: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func readDblmVulnerabilityResources(d *schema.ResourceData, m interface{}) error {
	sync := &DblmVulnerabilityResourcesDataSourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).DbLifeCycleManagementClient()

	return tfresource.ReadResource(sync)
}

type DblmVulnerabilityResourcesDataSourceCrud struct {
	D      *schema.ResourceData
	Client *oci_dblm.DbLifeCycleManagementClient
	Res    *oci_dblm.ListVulnerabilityResourcesResponse
}

func (s *DblmVulnerabilityResourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
}

func (s *DblmVulnerabilityResourcesDataSourceCrud) Get() error {
	request := oci_dblm.ListVulnerabilityResourcesRequest{}

	if compartmentId, ok := s.D.GetOkExists("compartment_id"); ok {
		tmp := compartmentId.(string)
		request.CompartmentId = &tmp
	}

	if cveId, ok := s.D.GetOkExists("cve_id"); ok {
		tmp := cveId.(string)
		request.CveId = &tmp
	}

	if databaseRelease, ok := s.D.GetOkExists("database_release"); ok {
		tmp := databaseRelease.(string)
		request.DatabaseRelease = &tmp
	}

	if displayName, ok := s.D.GetOkExists("display_name"); ok {
		tmp := displayName.(string)
		request.DisplayName = &tmp
	}

	if patchRecommendation, ok := s.D.GetOkExists("patch_recommendation"); ok {
		interfaces := patchRecommendation.([]interface{})
		tmp := make([]oci_dblm.ListVulnerabilityResourcesPatchRecommendationEnum, len(interfaces))
		for i := range interfaces {
			if interfaces[i] != nil {
				tmp[i] = interfaces[i].(oci_dblm.ListVulnerabilityResourcesPatchRecommendationEnum)
			}
		}
		if len(tmp) != 0 || s.D.HasChange("patch_recommendation") {
			request.PatchRecommendation = tmp
		}
	}

	if severityType, ok := s.D.GetOkExists("severity_type"); ok {
		interfaces := severityType.([]interface{})
		tmp := make([]oci_dblm.ResourcesSeveritiesEnum, len(interfaces))
		for i := range interfaces {
			if interfaces[i] != nil {
				tmp[i] = interfaces[i].(oci_dblm.ResourcesSeveritiesEnum)
			}
		}
		if len(tmp) != 0 || s.D.HasChange("severity_type") {
			request.SeverityType = tmp
		}
	}

	if state, ok := s.D.GetOkExists("state"); ok {
		request.LifecycleState = oci_dblm.DblmVulnerabilityLifecycleStateEnum(state.(string))
	}

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(false, "dblm")

	response, err := s.Client.ListVulnerabilityResources(context.Background(), request)
	if err != nil {
		return err
	}

	s.Res = &response
	request.Page = s.Res.OpcNextPage

	for request.Page != nil {
		listResponse, err := s.Client.ListVulnerabilityResources(context.Background(), request)
		if err != nil {
			return err
		}

		s.Res.Items = append(s.Res.Items, listResponse.Items...)
		request.Page = listResponse.OpcNextPage
	}

	return nil
}

func (s *DblmVulnerabilityResourcesDataSourceCrud) SetData() error {
	if s.Res == nil {
		return nil
	}

	s.D.SetId(tfresource.GenerateDataSourceHashID("DblmVulnerabilityResourcesDataSource-", DblmVulnerabilityResourcesDataSource(), s.D))
	resources := []map[string]interface{}{}
	vulnerabilityResource := map[string]interface{}{}

	items := []interface{}{}
	for _, item := range s.Res.Items {
		items = append(items, VulnerabilityResourceSummaryToMap(item))
	}
	vulnerabilityResource["items"] = items

	if f, fOk := s.D.GetOkExists("filter"); fOk {
		items = tfresource.ApplyFiltersInCollection(f.(*schema.Set), items, DblmVulnerabilityResourcesDataSource().Schema["vulnerability_resource_collection"].Elem.(*schema.Resource).Schema)
		vulnerabilityResource["items"] = items
	}

	resources = append(resources, vulnerabilityResource)
	if err := s.D.Set("vulnerability_resource_collection", resources); err != nil {
		return err
	}

	return nil
}

func ChildPdbToMap(obj oci_dblm.ChildPdb) map[string]interface{} {
	result := map[string]interface{}{}

	if obj.LastChangedBy != nil {
		result["last_changed_by"] = string(*obj.LastChangedBy)
	}

	if obj.Name != nil {
		result["name"] = string(*obj.Name)
	}

	if obj.OpenMode != nil {
		result["open_mode"] = string(*obj.OpenMode)
	}

	if obj.PdbId != nil {
		result["pdb_id"] = string(*obj.PdbId)
	}

	if obj.RecoveryStatus != nil {
		result["recovery_status"] = string(*obj.RecoveryStatus)
	}

	if obj.Restricted != nil {
		result["restricted"] = string(*obj.Restricted)
	}

	return result
}

func MetricErrorToMap(obj oci_dblm.MetricError) map[string]interface{} {
	result := map[string]interface{}{}

	if obj.ContentType != nil {
		result["content_type"] = string(*obj.ContentType)
	}

	if obj.Data != nil {
		result["data"] = string(*obj.Data)
	}

	if obj.ErrorType != nil {
		result["error_type"] = string(*obj.ErrorType)
	}

	if obj.Level != nil {
		result["level"] = string(*obj.Level)
	}

	if obj.Subject != nil {
		result["subject"] = string(*obj.Subject)
	}

	if obj.TimeGenerated != nil {
		result["time_generated"] = obj.TimeGenerated.String()
	}

	return result
}

func PatchRecommendationsDetailsSummaryToMap(obj oci_dblm.PatchRecommendationsDetailsSummary) map[string]interface{} {
	result := map[string]interface{}{}

	if obj.AbstractText != nil {
		result["abstract_text"] = string(*obj.AbstractText)
	}

	if obj.ClassificationName != nil {
		result["classification_name"] = string(*obj.ClassificationName)
	}

	if obj.HasFixForCve != nil {
		result["has_fix_for_cve"] = bool(*obj.HasFixForCve)
	}

	if obj.PatchName != nil {
		result["patch_name"] = string(*obj.PatchName)
	}

	if obj.TimeEvaluated != nil {
		result["time_evaluated"] = obj.TimeEvaluated.String()
	}

	if obj.TimeReleased != nil {
		result["time_released"] = obj.TimeReleased.String()
	}

	return result
}

func VulnerabilityResourceSummaryToMap(obj oci_dblm.VulnerabilityResourceSummary) map[string]interface{} {
	result := map[string]interface{}{}

	childPdbs := []interface{}{}
	for _, item := range obj.ChildPdbs {
		childPdbs = append(childPdbs, ChildPdbToMap(item))
	}
	result["child_pdbs"] = childPdbs

	if obj.Id != nil {
		result["id"] = string(*obj.Id)
	}

	if obj.ImageId != nil {
		result["image_id"] = string(*obj.ImageId)
	}

	metricErrors := []interface{}{}
	for _, item := range obj.MetricErrors {
		metricErrors = append(metricErrors, MetricErrorToMap(item))
	}
	result["metric_errors"] = metricErrors

	if obj.Name != nil {
		result["name"] = string(*obj.Name)
	}

	patchRecommendationsDetails := []interface{}{}
	for _, item := range obj.PatchRecommendationsDetails {
		patchRecommendationsDetails = append(patchRecommendationsDetails, PatchRecommendationsDetailsSummaryToMap(item))
	}
	result["patch_recommendations_details"] = patchRecommendationsDetails

	if obj.PatchRecommendationsSummary != nil {
		result["patch_recommendations_summary"] = []interface{}{objectToMap(obj.PatchRecommendationsSummary)}
	}

	if obj.Platform != nil {
		result["platform"] = string(*obj.Platform)
	}

	if obj.Release != nil {
		result["release"] = string(*obj.Release)
	}

	if obj.SubscribedImage != nil {
		result["subscribed_image"] = string(*obj.SubscribedImage)
	}

	if obj.TimeConfigCollected != nil {
		result["time_config_collected"] = obj.TimeConfigCollected.String()
	}

	if obj.TimeScanEnded != nil {
		result["time_scan_ended"] = obj.TimeScanEnded.String()
	}

	if obj.Version != nil {
		result["version"] = string(*obj.Version)
	}

	if obj.VulnerabilitiesSummary != nil {
		result["vulnerabilities_summary"] = []interface{}{objectToMap(obj.VulnerabilitiesSummary)}
	}

	return result
}

func objectToMap(obj *interface{}) map[string]interface{} {
	result := map[string]interface{}{}

	return result
}
