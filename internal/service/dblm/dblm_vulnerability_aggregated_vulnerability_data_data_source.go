// Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package dblm

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	oci_common "github.com/oracle/oci-go-sdk/v65/common"
	oci_dblm "github.com/oracle/oci-go-sdk/v65/dblm"

	"github.com/oracle/terraform-provider-oci/internal/client"
	"github.com/oracle/terraform-provider-oci/internal/tfresource"
)

func DblmVulnerabilityAggregatedVulnerabilityDataDataSource() *schema.Resource {
	return &schema.Resource{
		Read: readDblmVulnerabilityAggregatedVulnerabilityData,
		Schema: map[string]*schema.Schema{
			"filter": tfresource.DataSourceFiltersSchema(),
			"compartment_id": {
				Type:     schema.TypeString,
				Required: true,
			},
			"database_release": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"state": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"time_created_greater_than": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"time_ended_less_than": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"aggregated_vulnerability_collection": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						// Required

						// Optional

						// Computed
						"items": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									// Required

									// Optional

									// Computed
									"registered_resources_count": {
										Type:     schema.TypeInt,
										Computed: true,
									},
									"timestamp": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"vulnerabilities_count": {
										Type:     schema.TypeInt,
										Computed: true,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func readDblmVulnerabilityAggregatedVulnerabilityData(d *schema.ResourceData, m interface{}) error {
	sync := &DblmVulnerabilityAggregatedVulnerabilityDataDataSourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).DbLifeCycleManagementClient()

	return tfresource.ReadResource(sync)
}

type DblmVulnerabilityAggregatedVulnerabilityDataDataSourceCrud struct {
	D      *schema.ResourceData
	Client *oci_dblm.DbLifeCycleManagementClient
	Res    *oci_dblm.ListAggregatedVulnerabilityDataResponse
}

func (s *DblmVulnerabilityAggregatedVulnerabilityDataDataSourceCrud) VoidState() {
	s.D.SetId("")
}

func (s *DblmVulnerabilityAggregatedVulnerabilityDataDataSourceCrud) Get() error {
	request := oci_dblm.ListAggregatedVulnerabilityDataRequest{}

	if compartmentId, ok := s.D.GetOkExists("compartment_id"); ok {
		tmp := compartmentId.(string)
		request.CompartmentId = &tmp
	}

	if databaseRelease, ok := s.D.GetOkExists("database_release"); ok {
		tmp := databaseRelease.(string)
		request.DatabaseRelease = &tmp
	}

	if state, ok := s.D.GetOkExists("state"); ok {
		request.LifecycleState = oci_dblm.DblmVulnerabilityLifecycleStateEnum(state.(string))
	}

	if timeCreatedGreaterThan, ok := s.D.GetOkExists("time_created_greater_than"); ok {
		tmp, err := time.Parse(time.RFC3339, timeCreatedGreaterThan.(string))
		if err != nil {
			return err
		}
		request.TimeCreatedGreaterThan = &oci_common.SDKTime{Time: tmp}
	}

	if timeEndedLessThan, ok := s.D.GetOkExists("time_ended_less_than"); ok {
		tmp, err := time.Parse(time.RFC3339, timeEndedLessThan.(string))
		if err != nil {
			return err
		}
		request.TimeEndedLessThan = &oci_common.SDKTime{Time: tmp}
	}

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(false, "dblm")

	response, err := s.Client.ListAggregatedVulnerabilityData(context.Background(), request)
	if err != nil {
		return err
	}

	s.Res = &response
	/*request.Page = s.Res.OpcNextPage

	for request.Page != nil {
		listResponse, err := s.Client.ListAggregatedVulnerabilityData(context.Background(), request)
		if err != nil {
			return err
		}

		s.Res.Items = append(s.Res.Items, listResponse.Items...)
		request.Page = listResponse.OpcNextPage
	}*/

	return nil
}

func (s *DblmVulnerabilityAggregatedVulnerabilityDataDataSourceCrud) SetData() error {
	if s.Res == nil {
		return nil
	}

	s.D.SetId(tfresource.GenerateDataSourceHashID("DblmVulnerabilityAggregatedVulnerabilityDataDataSource-", DblmVulnerabilityAggregatedVulnerabilityDataDataSource(), s.D))
	resources := []map[string]interface{}{}
	vulnerabilityAggregatedVulnerabilityData := map[string]interface{}{}

	items := []interface{}{}
	for _, item := range s.Res.Items {
		items = append(items, AggregatedVulnerabilitySummaryToMap(item))
	}
	vulnerabilityAggregatedVulnerabilityData["items"] = items

	if f, fOk := s.D.GetOkExists("filter"); fOk {
		items = tfresource.ApplyFiltersInCollection(f.(*schema.Set), items, DblmVulnerabilityAggregatedVulnerabilityDataDataSource().Schema["aggregated_vulnerability_collection"].Elem.(*schema.Resource).Schema)
		vulnerabilityAggregatedVulnerabilityData["items"] = items
	}

	resources = append(resources, vulnerabilityAggregatedVulnerabilityData)
	if err := s.D.Set("aggregated_vulnerability_collection", resources); err != nil {
		return err
	}

	return nil
}

func AggregatedVulnerabilitySummaryToMap(obj oci_dblm.AggregatedVulnerabilitySummary) map[string]interface{} {
	result := map[string]interface{}{}

	if obj.RegisteredResourcesCount != nil {
		result["registered_resources_count"] = int(*obj.RegisteredResourcesCount)
	}

	if obj.Timestamp != nil {
		result["timestamp"] = obj.Timestamp.String()
	}

	if obj.VulnerabilitiesCount != nil {
		result["vulnerabilities_count"] = int(*obj.VulnerabilitiesCount)
	}

	return result
}
