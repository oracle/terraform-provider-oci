// Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package dblm

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	oci_dblm "github.com/oracle/oci-go-sdk/v65/dblm"

	"github.com/oracle/terraform-provider-oci/internal/client"
	"github.com/oracle/terraform-provider-oci/internal/tfresource"
)

func DblmVulnerabilityNotificationsDataSource() *schema.Resource {
	return &schema.Resource{
		Read: readDblmVulnerabilityNotifications,
		Schema: map[string]*schema.Schema{
			"filter": tfresource.DataSourceFiltersSchema(),
			"compartment_id": {
				Type:     schema.TypeString,
				Required: true,
			},
			"notification_collection": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						// Required

						// Optional

						// Computed
						"items": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									// Required

									// Optional

									// Computed
									"id": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"notification_text": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"notification_type": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"time_published": {
										Type:     schema.TypeString,
										Computed: true,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func readDblmVulnerabilityNotifications(d *schema.ResourceData, m interface{}) error {
	sync := &DblmVulnerabilityNotificationsDataSourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).DbLifeCycleManagementClient()

	return tfresource.ReadResource(sync)
}

type DblmVulnerabilityNotificationsDataSourceCrud struct {
	D      *schema.ResourceData
	Client *oci_dblm.DbLifeCycleManagementClient
	Res    *oci_dblm.ListNotificationsResponse
}

func (s *DblmVulnerabilityNotificationsDataSourceCrud) VoidState() {
	s.D.SetId("")
}

func (s *DblmVulnerabilityNotificationsDataSourceCrud) Get() error {
	request := oci_dblm.ListNotificationsRequest{}

	if compartmentId, ok := s.D.GetOkExists("compartment_id"); ok {
		tmp := compartmentId.(string)
		request.CompartmentId = &tmp
	}

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(false, "dblm")

	response, err := s.Client.ListNotifications(context.Background(), request)
	if err != nil {
		return err
	}

	s.Res = &response
	return nil
}

func (s *DblmVulnerabilityNotificationsDataSourceCrud) SetData() error {
	if s.Res == nil {
		return nil
	}

	s.D.SetId(tfresource.GenerateDataSourceHashID("DblmVulnerabilityNotificationsDataSource-", DblmVulnerabilityNotificationsDataSource(), s.D))
	resources := []map[string]interface{}{}
	vulnerabilityNotification := map[string]interface{}{}

	items := []interface{}{}
	for _, item := range s.Res.Items {
		items = append(items, NotificationSummaryToMap(item))
	}
	vulnerabilityNotification["items"] = items

	if f, fOk := s.D.GetOkExists("filter"); fOk {
		items = tfresource.ApplyFiltersInCollection(f.(*schema.Set), items, DblmVulnerabilityNotificationsDataSource().Schema["notification_collection"].Elem.(*schema.Resource).Schema)
		vulnerabilityNotification["items"] = items
	}

	resources = append(resources, vulnerabilityNotification)
	if err := s.D.Set("notification_collection", resources); err != nil {
		return err
	}

	return nil
}

func NotificationSummaryToMap(obj oci_dblm.NotificationSummary) map[string]interface{} {
	result := map[string]interface{}{}

	if obj.Id != nil {
		result["id"] = string(*obj.Id)
	}

	if obj.NotificationText != nil {
		result["notification_text"] = string(*obj.NotificationText)
	}

	result["notification_type"] = string(obj.NotificationType)

	if obj.TimePublished != nil {
		result["time_published"] = obj.TimePublished.String()
	}

	return result
}
