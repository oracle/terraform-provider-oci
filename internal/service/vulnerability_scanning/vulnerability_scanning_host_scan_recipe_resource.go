// Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package vulnerability_scanning

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/oracle/terraform-provider-oci/internal/client"
	"github.com/oracle/terraform-provider-oci/internal/tfresource"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"

	"github.com/oracle/oci-go-sdk/v65/common"
	oci_common "github.com/oracle/oci-go-sdk/v65/common"
	oci_vulnerability_scanning "github.com/oracle/oci-go-sdk/v65/vulnerabilityscanning"
)

func VulnerabilityScanningHostScanRecipeResource() *schema.Resource {
	return &schema.Resource{
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Timeouts: tfresource.DefaultTimeout,
		Create:   createVulnerabilityScanningHostScanRecipe,
		Read:     readVulnerabilityScanningHostScanRecipe,
		Update:   updateVulnerabilityScanningHostScanRecipe,
		Delete:   deleteVulnerabilityScanningHostScanRecipe,
		Schema: map[string]*schema.Schema{
			// Required
			"agent_settings": {
				Type:     schema.TypeList,
				Required: true,
				MaxItems: 1,
				MinItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						// Required
						"scan_level": {
							Type:     schema.TypeString,
							Required: true,
						},

						// Optional
						"agent_configuration": {
							Type:     schema.TypeList,
							Optional: true,
							Computed: true,
							MaxItems: 1,
							MinItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									// Required
									"vendor": {
										Type:             schema.TypeString,
										Required:         true,
										DiffSuppressFunc: tfresource.EqualIgnoreCaseSuppressDiff,
										ValidateFunc: validation.StringInSlice([]string{
											"OCI",
											"QUALYS",
										}, true),
									},

									// Optional
									"cis_benchmark_settings": {
										Type:     schema.TypeList,
										Optional: true,
										Computed: true,
										MaxItems: 1,
										MinItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												// Required

												// Optional
												"scan_level": {
													Type:     schema.TypeString,
													Optional: true,
													Computed: true,
												},

												// Computed
											},
										},
									},
									"endpoint_protection_settings": {
										Type:     schema.TypeList,
										Optional: true,
										Computed: true,
										MaxItems: 1,
										MinItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												// Required

												// Optional
												"scan_level": {
													Type:     schema.TypeString,
													Optional: true,
													Computed: true,
												},

												// Computed
											},
										},
									},
									"should_un_install": {
										Type:     schema.TypeBool,
										Optional: true,
										Computed: true,
									},
									"vault_secret_id": {
										Type:     schema.TypeString,
										Optional: true,
										Computed: true,
									},
									"vendor_type": {
										Type:     schema.TypeString,
										Optional: true,
										Computed: true,
									},

									// Computed
								},
							},
						},

						// Computed
					},
				},
			},
			"compartment_id": {
				Type:     schema.TypeString,
				Required: true,
			},
			"port_settings": {
				Type:     schema.TypeList,
				Required: true,
				MaxItems: 1,
				MinItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						// Required
						"scan_level": {
							Type:     schema.TypeString,
							Required: true,
						},

						// Optional

						// Computed
					},
				},
			},
			"schedule": {
				Type:     schema.TypeList,
				Required: true,
				MaxItems: 1,
				MinItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						// Required
						"type": {
							Type:     schema.TypeString,
							Required: true,
						},

						// Optional
						"day_of_week": {
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},

						// Computed
					},
				},
			},

			// Optional
			"application_settings": {
				Type:     schema.TypeList,
				Optional: true,
				Computed: true,
				MaxItems: 1,
				MinItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						// Required
						"application_scan_recurrence": {
							Type:     schema.TypeString,
							Required: true,
						},
						"folders_to_scan": {
							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									// Required
									"folder": {
										Type:     schema.TypeString,
										Required: true,
									},
									"operatingsystem": {
										Type:     schema.TypeString,
										Required: true,
									},

									// Optional

									// Computed
								},
							},
						},
						"is_enabled": {
							Type:     schema.TypeBool,
							Required: true,
						},

						// Optional

						// Computed
					},
				},
			},
			"defined_tags": {
				Type:             schema.TypeMap,
				Optional:         true,
				Computed:         true,
				DiffSuppressFunc: tfresource.DefinedTagsDiffSuppressFunction,
				Elem:             schema.TypeString,
			},
			"display_name": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"freeform_tags": {
				Type:     schema.TypeMap,
				Optional: true,
				Computed: true,
				Elem:     schema.TypeString,
			},

			// Computed
			"state": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"system_tags": {
				Type:     schema.TypeMap,
				Computed: true,
				Elem:     schema.TypeString,
			},
			"time_created": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"time_updated": {
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func createVulnerabilityScanningHostScanRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanRecipeResourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).VulnerabilityScanningClient()

	return tfresource.CreateResource(d, sync)
}

func readVulnerabilityScanningHostScanRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanRecipeResourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).VulnerabilityScanningClient()

	return tfresource.ReadResource(sync)
}

func updateVulnerabilityScanningHostScanRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanRecipeResourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).VulnerabilityScanningClient()

	return tfresource.UpdateResource(d, sync)
}

func deleteVulnerabilityScanningHostScanRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanRecipeResourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).VulnerabilityScanningClient()
	sync.DisableNotFoundRetries = true

	return tfresource.DeleteResource(d, sync)
}

type VulnerabilityScanningHostScanRecipeResourceCrud struct {
	tfresource.BaseCrud
	Client                 *oci_vulnerability_scanning.VulnerabilityScanningClient
	Res                    *oci_vulnerability_scanning.HostScanRecipe
	DisableNotFoundRetries bool
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) ID() string {
	return *s.Res.Id
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) CreatedPending() []string {
	return []string{
		string(oci_vulnerability_scanning.LifecycleStateCreating),
	}
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) CreatedTarget() []string {
	return []string{
		string(oci_vulnerability_scanning.LifecycleStateActive),
	}
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) DeletedPending() []string {
	return []string{
		string(oci_vulnerability_scanning.LifecycleStateDeleting),
	}
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) DeletedTarget() []string {
	return []string{
		string(oci_vulnerability_scanning.LifecycleStateDeleted),
	}
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) Create() error {
	request := oci_vulnerability_scanning.CreateHostScanRecipeRequest{}

	if agentSettings, ok := s.D.GetOkExists("agent_settings"); ok {
		if tmpList := agentSettings.([]interface{}); len(tmpList) > 0 {
			fieldKeyFormat := fmt.Sprintf("%s.%d.%%s", "agent_settings", 0)
			tmp, err := s.mapToHostScanAgentSettings(fieldKeyFormat)
			if err != nil {
				return err
			}
			request.AgentSettings = &tmp
		}
	}

	if applicationSettings, ok := s.D.GetOkExists("application_settings"); ok {
		if tmpList := applicationSettings.([]interface{}); len(tmpList) > 0 {
			fieldKeyFormat := fmt.Sprintf("%s.%d.%%s", "application_settings", 0)
			tmp, err := s.mapToApplicationScanSettings(fieldKeyFormat)
			if err != nil {
				return err
			}
			request.ApplicationSettings = &tmp
		}
	}

	if compartmentId, ok := s.D.GetOkExists("compartment_id"); ok {
		tmp := compartmentId.(string)
		request.CompartmentId = &tmp
	}

	if definedTags, ok := s.D.GetOkExists("defined_tags"); ok {
		convertedDefinedTags, err := tfresource.MapToDefinedTags(definedTags.(map[string]interface{}))
		if err != nil {
			return err
		}
		request.DefinedTags = convertedDefinedTags
	}

	if displayName, ok := s.D.GetOkExists("display_name"); ok {
		tmp := displayName.(string)
		request.DisplayName = &tmp
	}

	if freeformTags, ok := s.D.GetOkExists("freeform_tags"); ok {
		request.FreeformTags = tfresource.ObjectMapToStringMap(freeformTags.(map[string]interface{}))
	}

	if portSettings, ok := s.D.GetOkExists("port_settings"); ok {
		if tmpList := portSettings.([]interface{}); len(tmpList) > 0 {
			fieldKeyFormat := fmt.Sprintf("%s.%d.%%s", "port_settings", 0)
			tmp, err := s.mapToHostScanPortSettings(fieldKeyFormat)
			if err != nil {
				return err
			}
			request.PortSettings = &tmp
		}
	}

	if schedule, ok := s.D.GetOkExists("schedule"); ok {
		if tmpList := schedule.([]interface{}); len(tmpList) > 0 {
			fieldKeyFormat := fmt.Sprintf("%s.%d.%%s", "schedule", 0)
			tmp, err := s.mapToSchedule(fieldKeyFormat)
			if err != nil {
				return err
			}
			request.Schedule = &tmp
		}
	}

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "vulnerability_scanning")

	response, err := s.Client.CreateHostScanRecipe(context.Background(), request)
	if err != nil {
		return err
	}

	s.Res = &response.HostScanRecipe
	return nil
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) Get() error {
	request := oci_vulnerability_scanning.GetHostScanRecipeRequest{}

	tmp := s.D.Id()
	request.HostScanRecipeId = &tmp

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "vulnerability_scanning")

	response, err := s.Client.GetHostScanRecipe(context.Background(), request)
	if err != nil {
		return err
	}

	s.Res = &response.HostScanRecipe
	return nil
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
		oldRaw, newRaw := s.D.GetChange("compartment_id")
		if newRaw != "" && oldRaw != "" {
			err := s.updateCompartment(compartment)
			if err != nil {
				return err
			}
		}
	}
	request := oci_vulnerability_scanning.UpdateHostScanRecipeRequest{}

	if agentSettings, ok := s.D.GetOkExists("agent_settings"); ok {
		if tmpList := agentSettings.([]interface{}); len(tmpList) > 0 {
			fieldKeyFormat := fmt.Sprintf("%s.%d.%%s", "agent_settings", 0)
			tmp, err := s.mapToHostScanAgentSettings(fieldKeyFormat)
			if err != nil {
				return err
			}
			request.AgentSettings = &tmp
		}
	}

	if applicationSettings, ok := s.D.GetOkExists("application_settings"); ok {
		if tmpList := applicationSettings.([]interface{}); len(tmpList) > 0 {
			fieldKeyFormat := fmt.Sprintf("%s.%d.%%s", "application_settings", 0)
			tmp, err := s.mapToApplicationScanSettings(fieldKeyFormat)
			if err != nil {
				return err
			}
			request.ApplicationSettings = &tmp
		}
	}

	if definedTags, ok := s.D.GetOkExists("defined_tags"); ok {
		convertedDefinedTags, err := tfresource.MapToDefinedTags(definedTags.(map[string]interface{}))
		if err != nil {
			return err
		}
		request.DefinedTags = convertedDefinedTags
	}

	if displayName, ok := s.D.GetOkExists("display_name"); ok {
		tmp := displayName.(string)
		request.DisplayName = &tmp
	}

	if freeformTags, ok := s.D.GetOkExists("freeform_tags"); ok {
		request.FreeformTags = tfresource.ObjectMapToStringMap(freeformTags.(map[string]interface{}))
	}

	tmp := s.D.Id()
	request.HostScanRecipeId = &tmp

	if portSettings, ok := s.D.GetOkExists("port_settings"); ok {
		if tmpList := portSettings.([]interface{}); len(tmpList) > 0 {
			fieldKeyFormat := fmt.Sprintf("%s.%d.%%s", "port_settings", 0)
			tmp, err := s.mapToHostScanPortSettings(fieldKeyFormat)
			if err != nil {
				return err
			}
			request.PortSettings = &tmp
		}
	}

	if schedule, ok := s.D.GetOkExists("schedule"); ok {
		if tmpList := schedule.([]interface{}); len(tmpList) > 0 {
			fieldKeyFormat := fmt.Sprintf("%s.%d.%%s", "schedule", 0)
			tmp, err := s.mapToSchedule(fieldKeyFormat)
			if err != nil {
				return err
			}
			request.Schedule = &tmp
		}
	}

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "vulnerability_scanning")

	response, err := s.Client.UpdateHostScanRecipe(context.Background(), request)
	if err != nil {
		return err
	}

	workId := response.OpcWorkRequestId
	return s.getHostScanRecipeFromWorkRequest(workId, tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "vulnerability_scanning"), oci_vulnerability_scanning.ActionTypeUpdated, s.D.Timeout(schema.TimeoutUpdate))
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) getHostScanRecipeFromWorkRequest(workId *string, policy *common.RetryPolicy, actionTypeEnum oci_vulnerability_scanning.ActionTypeEnum, timeout time.Duration) error {
	// Wait until it finishes
	vssHostScanRecipeId, err := hostScanRecipeWaitForWorkRequest(workId, "hostScanRecipe",
		actionTypeEnum, timeout, s.DisableNotFoundRetries, s.Client)

	if err != nil {
		// Try to cancel the work request
		log.Printf("[DEBUG] creation failed: %v for identifier: %v\n", workId, vssHostScanRecipeId)
		return err
	}

	if vssHostScanRecipeId == nil {
		return fmt.Errorf("operation failed: %v for identifier: %v\n", workId, vssHostScanRecipeId)
	}

	s.D.SetId(*vssHostScanRecipeId)

	return s.Get()
}

func hostScanRecipeWaitForWorkRequest(wId *string, entityType string, action oci_vulnerability_scanning.ActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_vulnerability_scanning.VulnerabilityScanningClient) (*string, error) {
	retryPolicy := tfresource.GetRetryPolicy(disableFoundRetries, "vulnerability_scanning")
	retryPolicy.ShouldRetryOperation = hostScanWorkRequestShouldRetryFunc(timeout)

	response := oci_vulnerability_scanning.GetWorkRequestResponse{}
	stateConf := &retry.StateChangeConf{
		Pending: []string{
			string(oci_vulnerability_scanning.OperationStatusAccepted),
			string(oci_vulnerability_scanning.ActionTypeInProgress),
		},
		Target: []string{
			string(oci_vulnerability_scanning.OperationStatusSucceeded),
			string(oci_vulnerability_scanning.OperationStatusFailed),
		},
		Refresh: func() (interface{}, string, error) {
			var err error
			response, err = client.GetWorkRequest(context.Background(),
				oci_vulnerability_scanning.GetWorkRequestRequest{
					WorkRequestId: wId,
					RequestMetadata: oci_common.RequestMetadata{
						RetryPolicy: retryPolicy,
					},
				})
			wr := &response.WorkRequest
			return wr, string(wr.Status), err
		},
		Timeout: timeout,
	}
	if _, e := stateConf.WaitForState(); e != nil {
		return nil, e
	}

	var identifier *string
	// The work request response contains an array of objects that finished the operation
	for _, res := range response.Resources {
		if *res.EntityType == entityType {
			if res.ActionType == action {
				identifier = res.Identifier
				break
			}
		}
	}

	if identifier == nil || response.Status == oci_vulnerability_scanning.OperationStatusFailed {
		return nil, getErrorFromHostScanRecipeWorkRequest(client, wId, retryPolicy, entityType, action)
	}

	return identifier, nil
}

func hostScanWorkRequestShouldRetryFunc(timeout time.Duration) func(response oci_common.OCIOperationResponse) bool {
	startTime := time.Now()
	stopTime := startTime.Add(timeout)
	return func(response oci_common.OCIOperationResponse) bool {

		// Stop after timeout has elapsed
		if time.Now().After(stopTime) {
			return false
		}

		// Make sure we stop on default rules
		if tfresource.ShouldRetry(response, false, "vulnerability_scanning", startTime) {
			return true
		}

		// Only stop if the time Finished is set
		if workRequestResponse, ok := response.Response.(oci_vulnerability_scanning.GetWorkRequestResponse); ok {
			return workRequestResponse.TimeFinished == nil
		}
		return false
	}
}

func getErrorFromHostScanRecipeWorkRequest(client *oci_vulnerability_scanning.VulnerabilityScanningClient, wId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_vulnerability_scanning.ActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
		oci_vulnerability_scanning.ListWorkRequestErrorsRequest{
			WorkRequestId: wId,
			RequestMetadata: oci_common.RequestMetadata{
				RetryPolicy: retryPolicy,
			},
		})
	if err != nil {
		return err
	}

	allErrs := make([]string, 0)
	for _, wrkErr := range response.Items {
		allErrs = append(allErrs, *wrkErr.Message)
	}
	errorMessage := strings.Join(allErrs, "\n")

	workRequestErr := fmt.Errorf("work request did not succeed, workId: %s, entity: %s, action: %s. Message: %s", *wId, entityType, action, errorMessage)

	return workRequestErr
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) Delete() error {
	request := oci_vulnerability_scanning.DeleteHostScanRecipeRequest{}

	tmp := s.D.Id()
	request.HostScanRecipeId = &tmp

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "vulnerability_scanning")

	response, err := s.Client.DeleteHostScanRecipe(context.Background(), request)
	if err != nil {
		return err
	}
	workId := response.OpcWorkRequestId
	_, delWorkRequestErr := hostScanRecipeWaitForWorkRequest(workId, "hostScanRecipe", oci_vulnerability_scanning.ActionTypeDeleted, s.D.Timeout(schema.TimeoutDelete), s.DisableNotFoundRetries, s.Client)
	return delWorkRequestErr
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) SetData() error {
	if s.Res.AgentSettings != nil {
		s.D.Set("agent_settings", []interface{}{HostScanAgentSettingsToMap(s.Res.AgentSettings)})
	} else {
		s.D.Set("agent_settings", nil)
	}

	if s.Res.ApplicationSettings != nil {
		s.D.Set("application_settings", []interface{}{ApplicationScanSettingsToMap(s.Res.ApplicationSettings)})
	} else {
		s.D.Set("application_settings", nil)
	}

	if s.Res.CompartmentId != nil {
		s.D.Set("compartment_id", *s.Res.CompartmentId)
	}

	if s.Res.DefinedTags != nil {
		s.D.Set("defined_tags", tfresource.DefinedTagsToMap(s.Res.DefinedTags))
	}

	if s.Res.DisplayName != nil {
		s.D.Set("display_name", *s.Res.DisplayName)
	}

	s.D.Set("freeform_tags", s.Res.FreeformTags)

	if s.Res.PortSettings != nil {
		s.D.Set("port_settings", []interface{}{HostScanPortSettingsToMap(s.Res.PortSettings)})
	} else {
		s.D.Set("port_settings", nil)
	}

	if s.Res.Schedule != nil {
		s.D.Set("schedule", []interface{}{ScheduleToMap(s.Res.Schedule)})
	} else {
		s.D.Set("schedule", nil)
	}

	s.D.Set("state", s.Res.LifecycleState)

	if s.Res.SystemTags != nil {
		s.D.Set("system_tags", tfresource.SystemTagsToMap(s.Res.SystemTags))
	}

	if s.Res.TimeCreated != nil {
		s.D.Set("time_created", s.Res.TimeCreated.String())
	}

	if s.Res.TimeUpdated != nil {
		s.D.Set("time_updated", s.Res.TimeUpdated.String())
	}

	return nil
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) mapToApplicationScanSettings(fieldKeyFormat string) (oci_vulnerability_scanning.ApplicationScanSettings, error) {
	result := oci_vulnerability_scanning.ApplicationScanSettings{}

	if applicationScanRecurrence, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "application_scan_recurrence")); ok {
		tmp := applicationScanRecurrence.(string)
		result.ApplicationScanRecurrence = &tmp
	}

	if foldersToScan, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "folders_to_scan")); ok {
		interfaces := foldersToScan.([]interface{})
		tmp := make([]oci_vulnerability_scanning.FolderToScan, len(interfaces))
		for i := range interfaces {
			stateDataIndex := i
			fieldKeyFormatNextLevel := fmt.Sprintf("%s.%d.%%s", fmt.Sprintf(fieldKeyFormat, "folders_to_scan"), stateDataIndex)
			converted, err := s.mapToFolderToScan(fieldKeyFormatNextLevel)
			if err != nil {
				return result, err
			}
			tmp[i] = converted
		}
		if len(tmp) != 0 || s.D.HasChange(fmt.Sprintf(fieldKeyFormat, "folders_to_scan")) {
			result.FoldersToScan = tmp
		}
	}

	if isEnabled, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "is_enabled")); ok {
		tmp := isEnabled.(bool)
		result.IsEnabled = &tmp
	}

	return result, nil
}

func ApplicationScanSettingsToMap(obj *oci_vulnerability_scanning.ApplicationScanSettings) map[string]interface{} {
	result := map[string]interface{}{}

	if obj.ApplicationScanRecurrence != nil {
		result["application_scan_recurrence"] = string(*obj.ApplicationScanRecurrence)
	}

	foldersToScan := []interface{}{}
	for _, item := range obj.FoldersToScan {
		foldersToScan = append(foldersToScan, FolderToScanToMap(item))
	}
	result["folders_to_scan"] = foldersToScan

	if obj.IsEnabled != nil {
		result["is_enabled"] = bool(*obj.IsEnabled)
	}

	return result
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) mapToFolderToScan(fieldKeyFormat string) (oci_vulnerability_scanning.FolderToScan, error) {
	result := oci_vulnerability_scanning.FolderToScan{}

	if folder, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "folder")); ok {
		tmp := folder.(string)
		result.Folder = &tmp
	}

	if operatingsystem, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "operatingsystem")); ok {
		result.Operatingsystem = oci_vulnerability_scanning.OperatingSystemEnum(operatingsystem.(string))
	}

	return result, nil
}

func FolderToScanToMap(obj oci_vulnerability_scanning.FolderToScan) map[string]interface{} {
	result := map[string]interface{}{}

	if obj.Folder != nil {
		result["folder"] = string(*obj.Folder)
	}

	result["operatingsystem"] = string(obj.Operatingsystem)

	return result
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) mapToHostCisBenchmarkSettings(fieldKeyFormat string) (oci_vulnerability_scanning.HostCisBenchmarkSettings, error) {
	result := oci_vulnerability_scanning.HostCisBenchmarkSettings{}

	if scanLevel, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "scan_level")); ok {
		result.ScanLevel = oci_vulnerability_scanning.HostCisBenchmarkScanLevelEnum(scanLevel.(string))
	}

	return result, nil
}

func HostCisBenchmarkSettingsToMap(obj *oci_vulnerability_scanning.HostCisBenchmarkSettings) map[string]interface{} {
	result := map[string]interface{}{}

	result["scan_level"] = string(obj.ScanLevel)

	return result
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) mapToHostEndpointProtectionSettings(fieldKeyFormat string) (oci_vulnerability_scanning.HostEndpointProtectionSettings, error) {
	result := oci_vulnerability_scanning.HostEndpointProtectionSettings{}

	if scanLevel, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "scan_level")); ok {
		result.ScanLevel = oci_vulnerability_scanning.HostEndpointProtectionScanLevelEnum(scanLevel.(string))
	}

	return result, nil
}

func HostEndpointProtectionSettingsToMap(obj *oci_vulnerability_scanning.HostEndpointProtectionSettings) map[string]interface{} {
	result := map[string]interface{}{}

	result["scan_level"] = string(obj.ScanLevel)

	return result
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) mapToHostScanAgentConfiguration(fieldKeyFormat string) (oci_vulnerability_scanning.HostScanAgentConfiguration, error) {
	var baseObject oci_vulnerability_scanning.HostScanAgentConfiguration
	//discriminator
	vendorRaw, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "vendor"))
	var vendor string
	if ok {
		vendor = vendorRaw.(string)
	} else {
		vendor = "" // default value
	}
	switch strings.ToLower(vendor) {
	case strings.ToLower("OCI"):
		details := oci_vulnerability_scanning.HostScanAgentConfigurationOci{}
		if cisBenchmarkSettings, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "cis_benchmark_settings")); ok {
			if tmpList := cisBenchmarkSettings.([]interface{}); len(tmpList) > 0 {
				fieldKeyFormatNextLevel := fmt.Sprintf("%s.%d.%%s", fmt.Sprintf(fieldKeyFormat, "cis_benchmark_settings"), 0)
				tmp, err := s.mapToHostCisBenchmarkSettings(fieldKeyFormatNextLevel)
				if err != nil {
					return details, fmt.Errorf("unable to convert cis_benchmark_settings, encountered error: %v", err)
				}
				details.CisBenchmarkSettings = &tmp
			}
		}
		if endpointProtectionSettings, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "endpoint_protection_settings")); ok {
			if tmpList := endpointProtectionSettings.([]interface{}); len(tmpList) > 0 {
				fieldKeyFormatNextLevel := fmt.Sprintf("%s.%d.%%s", fmt.Sprintf(fieldKeyFormat, "endpoint_protection_settings"), 0)
				tmp, err := s.mapToHostEndpointProtectionSettings(fieldKeyFormatNextLevel)
				if err != nil {
					return details, fmt.Errorf("unable to convert endpoint_protection_settings, encountered error: %v", err)
				}
				details.EndpointProtectionSettings = &tmp
			}
		}
		if vendorType, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "vendor_type")); ok {
			details.VendorType = oci_vulnerability_scanning.VendorTypeEnum(vendorType.(string))
		}
		baseObject = details
	case strings.ToLower("QUALYS"):
		details := oci_vulnerability_scanning.HostScanAgentConfigurationQualys{}
		if shouldUnInstall, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "should_un_install")); ok {
			tmp := shouldUnInstall.(bool)
			details.ShouldUnInstall = &tmp
		}
		if vaultSecretId, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "vault_secret_id")); ok {
			tmp := vaultSecretId.(string)
			details.VaultSecretId = &tmp
		}
		if vendorType, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "vendor_type")); ok {
			details.VendorType = oci_vulnerability_scanning.VendorTypeEnum(vendorType.(string))
		}
		baseObject = details
	default:
		return nil, fmt.Errorf("unknown vendor '%v' was specified", vendor)
	}
	return baseObject, nil
}

func HostScanAgentConfigurationToMap(obj *oci_vulnerability_scanning.HostScanAgentConfiguration) map[string]interface{} {
	result := map[string]interface{}{}
	switch v := (*obj).(type) {
	case oci_vulnerability_scanning.HostScanAgentConfigurationOci:
		result["vendor"] = "OCI"

		if v.CisBenchmarkSettings != nil {
			result["cis_benchmark_settings"] = []interface{}{HostCisBenchmarkSettingsToMap(v.CisBenchmarkSettings)}
		}

		if v.EndpointProtectionSettings != nil {
			result["endpoint_protection_settings"] = []interface{}{HostEndpointProtectionSettingsToMap(v.EndpointProtectionSettings)}
		}

		result["vendor_type"] = string(v.VendorType)
	case oci_vulnerability_scanning.HostScanAgentConfigurationQualys:
		result["vendor"] = "QUALYS"

		if v.ShouldUnInstall != nil {
			result["should_un_install"] = bool(*v.ShouldUnInstall)
		}

		if v.VaultSecretId != nil {
			result["vault_secret_id"] = string(*v.VaultSecretId)
		}

		result["vendor_type"] = string(v.VendorType)
	default:
		log.Printf("[WARN] Received 'vendor' of unknown type %v", *obj)
		return nil
	}

	return result
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) mapToHostScanAgentSettings(fieldKeyFormat string) (oci_vulnerability_scanning.HostScanAgentSettings, error) {
	result := oci_vulnerability_scanning.HostScanAgentSettings{}

	if agentConfiguration, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "agent_configuration")); ok {
		if tmpList := agentConfiguration.([]interface{}); len(tmpList) > 0 {
			fieldKeyFormatNextLevel := fmt.Sprintf("%s.%d.%%s", fmt.Sprintf(fieldKeyFormat, "agent_configuration"), 0)
			tmp, err := s.mapToHostScanAgentConfiguration(fieldKeyFormatNextLevel)
			if err != nil {
				return result, fmt.Errorf("unable to convert agent_configuration, encountered error: %v", err)
			}
			result.AgentConfiguration = tmp
		}
	}

	if scanLevel, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "scan_level")); ok {
		result.ScanLevel = oci_vulnerability_scanning.HostAgentScanLevelEnum(scanLevel.(string))
	}

	return result, nil
}

func HostScanAgentSettingsToMap(obj *oci_vulnerability_scanning.HostScanAgentSettings) map[string]interface{} {
	result := map[string]interface{}{}

	if obj.AgentConfiguration != nil {
		agentConfigurationArray := []interface{}{}
		if agentConfigurationMap := HostScanAgentConfigurationToMap(&obj.AgentConfiguration); agentConfigurationMap != nil {
			agentConfigurationArray = append(agentConfigurationArray, agentConfigurationMap)
		}
		result["agent_configuration"] = agentConfigurationArray
	}

	result["scan_level"] = string(obj.ScanLevel)

	return result
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) mapToHostScanPortSettings(fieldKeyFormat string) (oci_vulnerability_scanning.HostScanPortSettings, error) {
	result := oci_vulnerability_scanning.HostScanPortSettings{}

	if scanLevel, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "scan_level")); ok {
		result.ScanLevel = oci_vulnerability_scanning.HostPortScanLevelEnum(scanLevel.(string))
	}

	return result, nil
}

func HostScanPortSettingsToMap(obj *oci_vulnerability_scanning.HostScanPortSettings) map[string]interface{} {
	result := map[string]interface{}{}

	result["scan_level"] = string(obj.ScanLevel)

	return result
}

func HostScanRecipeSummaryToMap(obj oci_vulnerability_scanning.HostScanRecipeSummary) map[string]interface{} {
	result := map[string]interface{}{}

	if obj.CompartmentId != nil {
		result["compartment_id"] = string(*obj.CompartmentId)
	}

	if obj.DefinedTags != nil {
		result["defined_tags"] = tfresource.DefinedTagsToMap(obj.DefinedTags)
	}

	if obj.DisplayName != nil {
		result["display_name"] = string(*obj.DisplayName)
	}

	result["freeform_tags"] = obj.FreeformTags

	if obj.Id != nil {
		result["id"] = string(*obj.Id)
	}

	result["state"] = string(obj.LifecycleState)

	if obj.SystemTags != nil {
		result["system_tags"] = tfresource.SystemTagsToMap(obj.SystemTags)
	}

	if obj.TimeCreated != nil {
		result["time_created"] = obj.TimeCreated.String()
	}

	if obj.TimeUpdated != nil {
		result["time_updated"] = obj.TimeUpdated.String()
	}

	return result
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) mapToSchedule(fieldKeyFormat string) (oci_vulnerability_scanning.Schedule, error) {
	result := oci_vulnerability_scanning.Schedule{}

	if dayOfWeek, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "day_of_week")); ok {
		result.DayOfWeek = oci_vulnerability_scanning.DayOfWeekEnum(dayOfWeek.(string))
	}

	if type_, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "type")); ok {
		result.Type = oci_vulnerability_scanning.ScheduleTypeEnum(type_.(string))
	}

	return result, nil
}

func ScheduleToMap(obj *oci_vulnerability_scanning.Schedule) map[string]interface{} {
	result := map[string]interface{}{}

	result["day_of_week"] = string(obj.DayOfWeek)

	result["type"] = string(obj.Type)

	return result
}

func (s *VulnerabilityScanningHostScanRecipeResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_vulnerability_scanning.ChangeHostScanRecipeCompartmentRequest{}

	compartmentTmp := compartment.(string)
	changeCompartmentRequest.CompartmentId = &compartmentTmp

	idTmp := s.D.Id()
	changeCompartmentRequest.HostScanRecipeId = &idTmp

	changeCompartmentRequest.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "vulnerability_scanning")

	_, err := s.Client.ChangeHostScanRecipeCompartment(context.Background(), changeCompartmentRequest)
	if err != nil {
		return err
	}

	if waitErr := tfresource.WaitForUpdatedState(s.D, s); waitErr != nil {
		return waitErr
	}

	return nil
}
