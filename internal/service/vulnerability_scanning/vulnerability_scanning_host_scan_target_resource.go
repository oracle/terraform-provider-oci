// Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package vulnerability_scanning

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	oci_common "github.com/oracle/oci-go-sdk/v65/common"

	"github.com/oracle/terraform-provider-oci/internal/client"
	"github.com/oracle/terraform-provider-oci/internal/tfresource"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	oci_vulnerability_scanning "github.com/oracle/oci-go-sdk/v65/vulnerabilityscanning"
)

func VulnerabilityScanningHostScanTargetResource() *schema.Resource {
	return &schema.Resource{
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Timeouts: tfresource.DefaultTimeout,
		Create:   createVulnerabilityScanningHostScanTarget,
		Read:     readVulnerabilityScanningHostScanTarget,
		Update:   updateVulnerabilityScanningHostScanTarget,
		Delete:   deleteVulnerabilityScanningHostScanTarget,
		Schema: map[string]*schema.Schema{
			// Required
			"compartment_id": {
				Type:     schema.TypeString,
				Required: true,
			},
			"host_scan_recipe_id": {
				Type:     schema.TypeString,
				Required: true,
			},
			"target_compartment_id": {
				Type:     schema.TypeString,
				Required: true,
			},

			// Optional
			"defined_tags": {
				Type:             schema.TypeMap,
				Optional:         true,
				Computed:         true,
				DiffSuppressFunc: tfresource.DefinedTagsDiffSuppressFunction,
				Elem:             schema.TypeString,
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"display_name": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"freeform_tags": {
				Type:     schema.TypeMap,
				Optional: true,
				Computed: true,
				Elem:     schema.TypeString,
			},
			"instance_ids": {
				Type:     schema.TypeList,
				Optional: true,
				Computed: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			// Computed
			"state": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"system_tags": {
				Type:     schema.TypeMap,
				Computed: true,
				Elem:     schema.TypeString,
			},
			"time_created": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"time_updated": {
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func createVulnerabilityScanningHostScanTarget(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanTargetResourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).VulnerabilityScanningClient()

	return tfresource.CreateResource(d, sync)
}

func readVulnerabilityScanningHostScanTarget(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanTargetResourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).VulnerabilityScanningClient()

	return tfresource.ReadResource(sync)
}

func updateVulnerabilityScanningHostScanTarget(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanTargetResourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).VulnerabilityScanningClient()

	return tfresource.UpdateResource(d, sync)
}

func deleteVulnerabilityScanningHostScanTarget(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanTargetResourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).VulnerabilityScanningClient()
	sync.DisableNotFoundRetries = true

	return tfresource.DeleteResource(d, sync)
}

type VulnerabilityScanningHostScanTargetResourceCrud struct {
	tfresource.BaseCrud
	Client                 *oci_vulnerability_scanning.VulnerabilityScanningClient
	Res                    *oci_vulnerability_scanning.HostScanTarget
	DisableNotFoundRetries bool
}

func (s *VulnerabilityScanningHostScanTargetResourceCrud) ID() string {
	return *s.Res.Id
}

func (s *VulnerabilityScanningHostScanTargetResourceCrud) CreatedPending() []string {
	return []string{
		string(oci_vulnerability_scanning.LifecycleStateCreating),
	}
}

func (s *VulnerabilityScanningHostScanTargetResourceCrud) CreatedTarget() []string {
	return []string{
		string(oci_vulnerability_scanning.LifecycleStateActive),
	}
}

func (s *VulnerabilityScanningHostScanTargetResourceCrud) DeletedPending() []string {
	return []string{
		string(oci_vulnerability_scanning.LifecycleStateDeleting),
	}
}

func (s *VulnerabilityScanningHostScanTargetResourceCrud) DeletedTarget() []string {
	return []string{
		string(oci_vulnerability_scanning.LifecycleStateDeleted),
	}
}

func (s *VulnerabilityScanningHostScanTargetResourceCrud) Create() error {
	request := oci_vulnerability_scanning.CreateHostScanTargetRequest{}

	if compartmentId, ok := s.D.GetOkExists("compartment_id"); ok {
		tmp := compartmentId.(string)
		request.CompartmentId = &tmp
	}

	if definedTags, ok := s.D.GetOkExists("defined_tags"); ok {
		convertedDefinedTags, err := tfresource.MapToDefinedTags(definedTags.(map[string]interface{}))
		if err != nil {
			return err
		}
		request.DefinedTags = convertedDefinedTags
	}

	if description, ok := s.D.GetOkExists("description"); ok {
		tmp := description.(string)
		request.Description = &tmp
	}

	if displayName, ok := s.D.GetOkExists("display_name"); ok {
		tmp := displayName.(string)
		request.DisplayName = &tmp
	}

	if freeformTags, ok := s.D.GetOkExists("freeform_tags"); ok {
		request.FreeformTags = tfresource.ObjectMapToStringMap(freeformTags.(map[string]interface{}))
	}

	if hostScanRecipeId, ok := s.D.GetOkExists("host_scan_recipe_id"); ok {
		tmp := hostScanRecipeId.(string)
		request.HostScanRecipeId = &tmp
	}

	if instanceIds, ok := s.D.GetOkExists("instance_ids"); ok {
		interfaces := instanceIds.([]interface{})
		tmp := make([]string, len(interfaces))
		for i := range interfaces {
			if interfaces[i] != nil {
				tmp[i] = interfaces[i].(string)
			}
		}
		if len(tmp) != 0 || s.D.HasChange("instance_ids") {
			request.InstanceIds = tmp
		}
	}

	if targetCompartmentId, ok := s.D.GetOkExists("target_compartment_id"); ok {
		tmp := targetCompartmentId.(string)
		request.TargetCompartmentId = &tmp
	}

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "vulnerability_scanning")

	response, err := s.Client.CreateHostScanTarget(context.Background(), request)
	if err != nil {
		return err
	}

	s.Res = &response.HostScanTarget
	return nil
}

func (s *VulnerabilityScanningHostScanTargetResourceCrud) Get() error {
	request := oci_vulnerability_scanning.GetHostScanTargetRequest{}

	tmp := s.D.Id()
	request.HostScanTargetId = &tmp

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "vulnerability_scanning")

	response, err := s.Client.GetHostScanTarget(context.Background(), request)
	if err != nil {
		return err
	}

	s.Res = &response.HostScanTarget
	return nil
}

func (s *VulnerabilityScanningHostScanTargetResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
		oldRaw, newRaw := s.D.GetChange("compartment_id")
		if newRaw != "" && oldRaw != "" {
			err := s.updateCompartment(compartment)
			if err != nil {
				return err
			}
		}
	}
	request := oci_vulnerability_scanning.UpdateHostScanTargetRequest{}

	if definedTags, ok := s.D.GetOkExists("defined_tags"); ok {
		convertedDefinedTags, err := tfresource.MapToDefinedTags(definedTags.(map[string]interface{}))
		if err != nil {
			return err
		}
		request.DefinedTags = convertedDefinedTags
	}

	if description, ok := s.D.GetOkExists("description"); ok {
		tmp := description.(string)
		request.Description = &tmp
	}

	if displayName, ok := s.D.GetOkExists("display_name"); ok {
		tmp := displayName.(string)
		request.DisplayName = &tmp
	}

	if freeformTags, ok := s.D.GetOkExists("freeform_tags"); ok {
		request.FreeformTags = tfresource.ObjectMapToStringMap(freeformTags.(map[string]interface{}))
	}

	if hostScanRecipeId, ok := s.D.GetOkExists("host_scan_recipe_id"); ok {
		tmp := hostScanRecipeId.(string)
		request.HostScanRecipeId = &tmp
	}

	tmp := s.D.Id()
	request.HostScanTargetId = &tmp

	if instanceIds, ok := s.D.GetOkExists("instance_ids"); ok {
		interfaces := instanceIds.([]interface{})
		tmp := make([]string, len(interfaces))
		for i := range interfaces {
			if interfaces[i] != nil {
				tmp[i] = interfaces[i].(string)
			}
		}
		if len(tmp) != 0 || s.D.HasChange("instance_ids") {
			request.InstanceIds = tmp
		}
	}

	if targetCompartmentId, ok := s.D.GetOkExists("target_compartment_id"); ok {
		tmp := targetCompartmentId.(string)
		request.TargetCompartmentId = &tmp
	}

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "vulnerability_scanning")

	response, err := s.Client.UpdateHostScanTarget(context.Background(), request)
	if err != nil {
		return err
	}

	workId := response.OpcWorkRequestId
	return s.getHostScanTargetFromWorkRequest(workId, tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "vulnerability_scanning"), oci_vulnerability_scanning.ActionTypeUpdated, s.D.Timeout(schema.TimeoutUpdate))
}

func (s *VulnerabilityScanningHostScanTargetResourceCrud) getHostScanTargetFromWorkRequest(workId *string, policy *oci_common.RetryPolicy, actionTypeEnum oci_vulnerability_scanning.ActionTypeEnum, timeout time.Duration) error {
	// Wait until it finishes
	vssHostScanTargetId, err := hostScanRecipeWaitForWorkRequest(workId, "hostScanTarget",
		actionTypeEnum, timeout, s.DisableNotFoundRetries, s.Client)

	if err != nil {
		// Try to cancel the work request
		log.Printf("[DEBUG] creation failed: %v for identifier: %v\n", workId, vssHostScanTargetId)
		return err
	}

	if vssHostScanTargetId == nil {
		return fmt.Errorf("operation failed: %v for identifier: %v\n", workId, vssHostScanTargetId)
	}

	s.D.SetId(*vssHostScanTargetId)

	return s.Get()
}

func hostScanTargetWaitForWorkRequest(wId *string, entityType string, action oci_vulnerability_scanning.ActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_vulnerability_scanning.VulnerabilityScanningClient) (*string, error) {
	retryPolicy := tfresource.GetRetryPolicy(disableFoundRetries, "vulnerability_scanning")
	retryPolicy.ShouldRetryOperation = hostScanWorkRequestShouldRetryFunc(timeout)

	response := oci_vulnerability_scanning.GetWorkRequestResponse{}
	stateConf := &retry.StateChangeConf{
		Pending: []string{
			string(oci_vulnerability_scanning.OperationStatusAccepted),
			string(oci_vulnerability_scanning.ActionTypeInProgress),
		},
		Target: []string{
			string(oci_vulnerability_scanning.OperationStatusSucceeded),
			string(oci_vulnerability_scanning.OperationStatusFailed),
		},
		Refresh: func() (interface{}, string, error) {
			var err error
			response, err = client.GetWorkRequest(context.Background(),
				oci_vulnerability_scanning.GetWorkRequestRequest{
					WorkRequestId: wId,
					RequestMetadata: oci_common.RequestMetadata{
						RetryPolicy: retryPolicy,
					},
				})
			wr := &response.WorkRequest
			return wr, string(wr.Status), err
		},
		Timeout: timeout,
	}
	if _, e := stateConf.WaitForState(); e != nil {
		return nil, e
	}

	var identifier *string
	// The work request response contains an array of objects that finished the operation
	for _, res := range response.Resources {
		if *res.EntityType == entityType {
			if res.ActionType == action {
				identifier = res.Identifier
				break
			}
		}
	}

	if identifier == nil || response.Status == oci_vulnerability_scanning.OperationStatusFailed {
		return nil, getErrorFromHostScanTargetWorkRequest(client, wId, retryPolicy, entityType, action)
	}

	return identifier, nil
}

func getErrorFromHostScanTargetWorkRequest(client *oci_vulnerability_scanning.VulnerabilityScanningClient, wId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_vulnerability_scanning.ActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
		oci_vulnerability_scanning.ListWorkRequestErrorsRequest{
			WorkRequestId: wId,
			RequestMetadata: oci_common.RequestMetadata{
				RetryPolicy: retryPolicy,
			},
		})
	if err != nil {
		return err
	}

	allErrs := make([]string, 0)
	for _, wrkErr := range response.Items {
		allErrs = append(allErrs, *wrkErr.Message)
	}
	errorMessage := strings.Join(allErrs, "\n")

	workRequestErr := fmt.Errorf("work request did not succeed, workId: %s, entity: %s, action: %s. Message: %s", *wId, entityType, action, errorMessage)

	return workRequestErr
}

func (s *VulnerabilityScanningHostScanTargetResourceCrud) Delete() error {
	request := oci_vulnerability_scanning.DeleteHostScanTargetRequest{}

	tmp := s.D.Id()
	request.HostScanTargetId = &tmp

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "vulnerability_scanning")

	response, err := s.Client.DeleteHostScanTarget(context.Background(), request)
	if err != nil {
		return err
	}
	workId := response.OpcWorkRequestId

	_, delWorkRequestErr := hostScanTargetWaitForWorkRequest(workId, "hostScanTarget", oci_vulnerability_scanning.ActionTypeDeleted, s.D.Timeout(schema.TimeoutDelete), s.DisableNotFoundRetries, s.Client)
	return delWorkRequestErr
}

func (s *VulnerabilityScanningHostScanTargetResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
		s.D.Set("compartment_id", *s.Res.CompartmentId)
	}

	if s.Res.DefinedTags != nil {
		s.D.Set("defined_tags", tfresource.DefinedTagsToMap(s.Res.DefinedTags))
	}

	if s.Res.Description != nil {
		s.D.Set("description", *s.Res.Description)
	}

	if s.Res.DisplayName != nil {
		s.D.Set("display_name", *s.Res.DisplayName)
	}

	s.D.Set("freeform_tags", s.Res.FreeformTags)

	if s.Res.HostScanRecipeId != nil {
		s.D.Set("host_scan_recipe_id", *s.Res.HostScanRecipeId)
	}

	s.D.Set("instance_ids", s.Res.InstanceIds)

	s.D.Set("state", s.Res.LifecycleState)

	if s.Res.SystemTags != nil {
		s.D.Set("system_tags", tfresource.SystemTagsToMap(s.Res.SystemTags))
	}

	if s.Res.TargetCompartmentId != nil {
		s.D.Set("target_compartment_id", *s.Res.TargetCompartmentId)
	}

	if s.Res.TimeCreated != nil {
		s.D.Set("time_created", s.Res.TimeCreated.String())
	}

	if s.Res.TimeUpdated != nil {
		s.D.Set("time_updated", s.Res.TimeUpdated.String())
	}

	return nil
}

func HostScanTargetSummaryToMap(obj oci_vulnerability_scanning.HostScanTargetSummary) map[string]interface{} {
	result := map[string]interface{}{}

	if obj.CompartmentId != nil {
		result["compartment_id"] = string(*obj.CompartmentId)
	}

	if obj.DefinedTags != nil {
		result["defined_tags"] = tfresource.DefinedTagsToMap(obj.DefinedTags)
	}

	if obj.DisplayName != nil {
		result["display_name"] = string(*obj.DisplayName)
	}

	result["freeform_tags"] = obj.FreeformTags

	if obj.HostScanRecipeId != nil {
		result["host_scan_recipe_id"] = string(*obj.HostScanRecipeId)
	}

	if obj.Id != nil {
		result["id"] = string(*obj.Id)
	}

	result["instance_ids"] = obj.InstanceIds

	result["state"] = string(obj.LifecycleState)

	if obj.SystemTags != nil {
		result["system_tags"] = tfresource.SystemTagsToMap(obj.SystemTags)
	}

	if obj.TargetCompartmentId != nil {
		result["target_compartment_id"] = string(*obj.TargetCompartmentId)
	}

	if obj.TimeCreated != nil {
		result["time_created"] = obj.TimeCreated.String()
	}

	if obj.TimeUpdated != nil {
		result["time_updated"] = obj.TimeUpdated.String()
	}

	return result
}

func (s *VulnerabilityScanningHostScanTargetResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_vulnerability_scanning.ChangeHostScanTargetCompartmentRequest{}

	compartmentTmp := compartment.(string)
	changeCompartmentRequest.CompartmentId = &compartmentTmp

	idTmp := s.D.Id()
	changeCompartmentRequest.HostScanTargetId = &idTmp

	changeCompartmentRequest.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "vulnerability_scanning")

	_, err := s.Client.ChangeHostScanTargetCompartment(context.Background(), changeCompartmentRequest)
	if err != nil {
		return err
	}

	if waitErr := tfresource.WaitForUpdatedState(s.D, s); waitErr != nil {
		return waitErr
	}

	return nil
}
