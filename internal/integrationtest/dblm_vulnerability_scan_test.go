// Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package integrationtest

import (
	"fmt"
	"strconv"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/oracle/terraform-provider-oci/httpreplay"
	"github.com/oracle/terraform-provider-oci/internal/acctest"

	"github.com/oracle/terraform-provider-oci/internal/resourcediscovery"

	"github.com/oracle/terraform-provider-oci/internal/utils"
)

var (
	DblmVulnerabilityScanResourceConfig = DblmVulnerabilityScanResourceDependencies +
		acctest.GenerateResourceFromRepresentationMap("oci_dblm_vulnerability_scan", "test_vulnerability_scan", acctest.Optional, acctest.Update, DblmVulnerabilityScanRepresentation)

	DblmVulnerabilityScanSingularDataSourceRepresentation = map[string]interface{}{
		"vulnerability_scan_id": acctest.Representation{RepType: acctest.Required, Create: `${oci_dblm_vulnerability_scan.test_vulnerability_scan.id}`},
	}

	DblmVulnerabilityScanDataSourceRepresentation = map[string]interface{}{
		"compartment_id": acctest.Representation{RepType: acctest.Required, Create: `${var.compartment_id}`},
		"display_name":   acctest.Representation{RepType: acctest.Optional, Create: `displayName`},
		//"time_created_greater_than": acctest.Representation{RepType: acctest.Optional, Create: `timeCreatedGreaterThan`},
		//"time_ended_less_than":      acctest.Representation{RepType: acctest.Optional, Create: `timeEndedLessThan`},
		"vulnerability_scan_id":     acctest.Representation{RepType: acctest.Optional, Create: `${oci_dblm_vulnerability_scan.test_vulnerability_scan.id}`},
		"vulnerability_scan_status": acctest.Representation{RepType: acctest.Optional, Create: []string{`COMPLETED`}},
		"vulnerability_scan_type":   acctest.Representation{RepType: acctest.Optional, Create: `CVE`},
		"filter":                    acctest.RepresentationGroup{RepType: acctest.Required, Group: DblmVulnerabilityScanDataSourceFilterRepresentation}}
	DblmVulnerabilityScanDataSourceFilterRepresentation = map[string]interface{}{
		"name":   acctest.Representation{RepType: acctest.Required, Create: `id`},
		"values": acctest.Representation{RepType: acctest.Required, Create: []string{`${oci_dblm_vulnerability_scan.test_vulnerability_scan.id}`}},
	}

	DblmVulnerabilityScanRepresentation = map[string]interface{}{
		"compartment_id":          acctest.Representation{RepType: acctest.Required, Create: `${var.compartment_id}`},
		"vulnerability_scan_type": acctest.Representation{RepType: acctest.Required, Create: `CVE`},
		//Added for testing purposes
		"lifecycle": acctest.RepresentationGroup{RepType: acctest.Required, Group: ignoreChangesDblmVulnerabilityScanRepresentation},
	}

	//Added for testing purposes
	ignoreChangesDblmVulnerabilityScanRepresentation = map[string]interface{}{
		"ignore_changes": acctest.Representation{RepType: acctest.Required, Create: []string{`defined_tags`, `system_tags`}},
	}

	DblmVulnerabilityScanResourceDependencies = "" //acctest.GenerateResourceFromRepresentationMap("oci_dblm_vulnerability_scan", "test_vulnerability_scan", acctest.Required, acctest.Create, DblmVulnerabilityScanRepresentation)
)

// issue-routing-tag: dblm/default
func TestDblmVulnerabilityScanResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDblmVulnerabilityScanResource_basic")
	defer httpreplay.SaveScenario()

	config := acctest.ProviderTestConfig()

	compartmentId := utils.GetEnvSettingWithBlankDefault("compartment_ocid")
	compartmentIdVariableStr := fmt.Sprintf("variable \"compartment_id\" { default = \"%s\" }\n", compartmentId)

	resourceName := "oci_dblm_vulnerability_scan.test_vulnerability_scan"
	datasourceName := "data.oci_dblm_vulnerability_scans.test_vulnerability_scans"
	singularDatasourceName := "data.oci_dblm_vulnerability_scan.test_vulnerability_scan"

	var resId string
	// Save TF content to Create resource with only required properties. This has to be exactly the same as the config part in the create step in the test.
	acctest.SaveConfigContent(config+compartmentIdVariableStr+DblmVulnerabilityScanResourceDependencies+
		acctest.GenerateResourceFromRepresentationMap("oci_dblm_vulnerability_scan", "test_vulnerability_scan", acctest.Required, acctest.Create, DblmVulnerabilityScanRepresentation), "dblm", "vulnerabilityScan", t)

	acctest.ResourceTest(t, nil, []resource.TestStep{
		// verify Create
		{
			Config: config + compartmentIdVariableStr + DblmVulnerabilityScanResourceDependencies +
				acctest.GenerateResourceFromRepresentationMap("oci_dblm_vulnerability_scan", "test_vulnerability_scan", acctest.Required, acctest.Create, DblmVulnerabilityScanRepresentation),
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(resourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttr(resourceName, "vulnerability_scan_type", "CVE"),

				func(s *terraform.State) (err error) {
					resId, err = acctest.FromInstanceState(s, resourceName, "id")
					if isEnableExportCompartment, _ := strconv.ParseBool(utils.GetEnvSettingWithDefault("enable_export_compartment", "true")); isEnableExportCompartment {
						if errExport := resourcediscovery.TestExportCompartmentWithResourceName(&resId, &compartmentId, resourceName); errExport != nil {
							return errExport
						}
					}
					return err
				},
			),
		},

		// verify datasource
		{
			Config: config +
				acctest.GenerateDataSourceFromRepresentationMap("oci_dblm_vulnerability_scans", "test_vulnerability_scans", acctest.Optional, acctest.Update, DblmVulnerabilityScanDataSourceRepresentation) +
				compartmentIdVariableStr + DblmVulnerabilityScanResourceDependencies +
				acctest.GenerateResourceFromRepresentationMap("oci_dblm_vulnerability_scan", "test_vulnerability_scan", acctest.Optional, acctest.Update, DblmVulnerabilityScanRepresentation),
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(datasourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttr(datasourceName, "display_name", "displayName"),
				//resource.TestCheckResourceAttrSet(datasourceName, "time_created_greater_than"),
				//resource.TestCheckResourceAttrSet(datasourceName, "time_ended_less_than"),
				resource.TestCheckResourceAttrSet(datasourceName, "vulnerability_scan_id"),
				resource.TestCheckResourceAttr(datasourceName, "vulnerability_scan_status.#", "1"),
				resource.TestCheckResourceAttr(datasourceName, "vulnerability_scan_type", "CVE"),

				/*resource.TestCheckResourceAttr(datasourceName, "vulnerability_scan_collection.#", "1"),
				resource.TestCheckResourceAttr(datasourceName, "vulnerability_scan_collection.0.items.#", "1"),*/
			),
		},
		// verify singular datasource
		{
			Config: config +
				acctest.GenerateDataSourceFromRepresentationMap("oci_dblm_vulnerability_scan", "test_vulnerability_scan", acctest.Required, acctest.Create, DblmVulnerabilityScanSingularDataSourceRepresentation) +
				compartmentIdVariableStr + DblmVulnerabilityScanResourceConfig,
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttrSet(singularDatasourceName, "vulnerability_scan_id"),

				resource.TestCheckResourceAttr(singularDatasourceName, "compartment_id", compartmentId),
				//resource.TestCheckResourceAttrSet(singularDatasourceName, "display_name"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "id"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "state"),
				//resource.TestCheckResourceAttrSet(singularDatasourceName, "time_created"),
				//resource.TestCheckResourceAttrSet(singularDatasourceName, "time_ended"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "vulnerability_scan_message"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "vulnerability_scan_status"),
				resource.TestCheckResourceAttr(singularDatasourceName, "vulnerability_scan_type", "CVE"),
			),
		},
		// verify resource import
		{
			Config:                  config + DblmVulnerabilityScanResourceConfig,
			ImportState:             true,
			ImportStateVerify:       true,
			ImportStateVerifyIgnore: []string{},
			ResourceName:            resourceName,
		},
	})
}
