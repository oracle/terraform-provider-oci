// Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package integrationtest

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"

	"github.com/oracle/terraform-provider-oci/httpreplay"
	"github.com/oracle/terraform-provider-oci/internal/acctest"

	"github.com/oracle/terraform-provider-oci/internal/utils"
)

var (
	DblmVulnerabilityAggregatedVulnerabilityDataDataSourceRepresentation = map[string]interface{}{
		"compartment_id":            acctest.Representation{RepType: acctest.Required, Create: `${var.compartment_id}`},
		"database_release":          acctest.Representation{RepType: acctest.Optional, Create: `databaseRelease`},
		"state":                     acctest.Representation{RepType: acctest.Optional, Create: `AVAILABLE`},
		"time_created_greater_than": acctest.Representation{RepType: acctest.Optional, Create: `timeCreatedGreaterThan`},
		"time_ended_less_than":      acctest.Representation{RepType: acctest.Optional, Create: `timeEndedLessThan`},
	}

	DblmVulnerabilityAggregatedVulnerabilityDataResourceConfig = ""
)

// issue-routing-tag: dblm/default
func TestDblmVulnerabilityAggregatedVulnerabilityDataResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDblmVulnerabilityAggregatedVulnerabilityDataResource_basic")
	defer httpreplay.SaveScenario()

	config := acctest.ProviderTestConfig()

	compartmentId := utils.GetEnvSettingWithBlankDefault("compartment_ocid")
	compartmentIdVariableStr := fmt.Sprintf("variable \"compartment_id\" { default = \"%s\" }\n", compartmentId)

	datasourceName := "data.oci_dblm_vulnerability_aggregated_vulnerability_data.test_vulnerability_aggregated_vulnerability_data"

	acctest.SaveConfigContent("", "", "", t)

	acctest.ResourceTest(t, nil, []resource.TestStep{
		// verify datasource
		{
			Config: config +
				acctest.GenerateDataSourceFromRepresentationMap("oci_dblm_vulnerability_aggregated_vulnerability_data", "test_vulnerability_aggregated_vulnerability_data", acctest.Required, acctest.Create, DblmVulnerabilityAggregatedVulnerabilityDataDataSourceRepresentation) +
				compartmentIdVariableStr + DblmVulnerabilityAggregatedVulnerabilityDataResourceConfig,
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				/*resource.TestCheckResourceAttr(datasourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttr(datasourceName, "database_release", "databaseRelease"),
				resource.TestCheckResourceAttr(datasourceName, "state", "AVAILABLE"),
				resource.TestCheckResourceAttrSet(datasourceName, "time_created_greater_than"),
				resource.TestCheckResourceAttrSet(datasourceName, "time_ended_less_than"),*/

				resource.TestCheckResourceAttrSet(datasourceName, "aggregated_vulnerability_collection.#"),
				//resource.TestCheckResourceAttr(datasourceName, "aggregated_vulnerability_collection.0.items.#", "2"),
			),
		},
	})
}
