// Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package integrationtest

import (
	"context"
	"fmt"
	"strconv"
	"testing"

	"github.com/oracle/terraform-provider-oci/internal/acctest"
	tf_client "github.com/oracle/terraform-provider-oci/internal/client"
	"github.com/oracle/terraform-provider-oci/internal/resourcediscovery"
	"github.com/oracle/terraform-provider-oci/internal/tfresource"
	"github.com/oracle/terraform-provider-oci/internal/utils"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/oracle/oci-go-sdk/v65/common"
	oci_vulnerability_scanning "github.com/oracle/oci-go-sdk/v65/vulnerabilityscanning"

	"github.com/oracle/terraform-provider-oci/httpreplay"
)

var (
	HostScanRecipeRequiredOnlyResourceQualys = HostScanRecipeResourceDependenciesQualys +
		acctest.GenerateResourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipe", "test_host_scan_recipe", acctest.Required, acctest.Create, VulnerabilityScanningHostScanRecipeRepresentationQualys)

	HostScanRecipeResourceConfigQualys = HostScanRecipeResourceDependenciesQualys +
		acctest.GenerateResourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipe", "test_host_scan_recipe", acctest.Optional, acctest.Update, VulnerabilityScanningHostScanRecipeRepresentationQualys)

	hostScanRecipeSingularDataSourceRepresentationQualys = map[string]interface{}{
		"host_scan_recipe_id": acctest.Representation{RepType: acctest.Required, Create: `${oci_vulnerability_scanning_host_scan_recipe.test_host_scan_recipe.id}`},
	}

	hostScanRecipeDataSourceRepresentationQualys = map[string]interface{}{
		"compartment_id": acctest.Representation{RepType: acctest.Required, Create: `${var.compartment_id}`},
		"display_name":   acctest.Representation{RepType: acctest.Optional, Create: `displayName`, Update: `displayName3`},
		"state":          acctest.Representation{RepType: acctest.Optional, Create: `ACTIVE`},
		"filter":         acctest.RepresentationGroup{RepType: acctest.Required, Group: hostScanRecipeDataSourceFilterRepresentationQualys}}
	hostScanRecipeDataSourceFilterRepresentationQualys = map[string]interface{}{
		"name":   acctest.Representation{RepType: acctest.Required, Create: `id`},
		"values": acctest.Representation{RepType: acctest.Required, Create: []string{`${oci_vulnerability_scanning_host_scan_recipe.test_host_scan_recipe.id}`}},
	}

	VulnerabilityScanningHostScanRecipeRepresentationQualys = map[string]interface{}{
		"agent_settings":       acctest.RepresentationGroup{RepType: acctest.Required, Group: hostScanRecipeAgentSettingsRepresentationQualys},
		"compartment_id":       acctest.Representation{RepType: acctest.Required, Create: `${var.compartment_id}`},
		"port_settings":        acctest.RepresentationGroup{RepType: acctest.Required, Group: hostScanRecipePortSettingsRepresentation},
		"schedule":             acctest.RepresentationGroup{RepType: acctest.Required, Group: hostScanRecipeScheduleRepresentation},
		"application_settings": acctest.RepresentationGroup{RepType: acctest.Optional, Group: hostScanRecipeApplicationSettingsRepresentationQualys},
		"defined_tags":         acctest.Representation{RepType: acctest.Optional, Create: `${map("${oci_identity_tag_namespace.tag-namespace1.name}.${oci_identity_tag.tag1.name}", "value")}`, Update: `${map("${oci_identity_tag_namespace.tag-namespace1.name}.${oci_identity_tag.tag1.name}", "updatedValue")}`},
		"display_name":         acctest.Representation{RepType: acctest.Optional, Create: `displayName`, Update: `displayName3`},
		"freeform_tags":        acctest.Representation{RepType: acctest.Optional, Create: map[string]string{"bar-key": "value"}, Update: map[string]string{"Department": "Accounting"}},
		"lifecycle":            acctest.RepresentationGroup{RepType: acctest.Required, Group: ignoreChangesVulnerabilityScanningHostScanRecipeRepresentation},
	}
	hostScanRecipeAgentSettingsRepresentationQualys = map[string]interface{}{
		"scan_level":          acctest.Representation{RepType: acctest.Required, Create: `STANDARD`, Update: `STANDARD`},
		"agent_configuration": acctest.RepresentationGroup{RepType: acctest.Optional, Group: hostScanRecipeAgentSettingsAgentConfigurationRepresentationQualys},
	}
	hostScanRecipeAgentSettingsAgentConfigurationRepresentationQualys = map[string]interface{}{
		"vendor":            acctest.Representation{RepType: acctest.Required, Create: `QUALYS`, Update: `QUALYS`},
		"should_un_install": acctest.Representation{RepType: acctest.Required, Create: `false`, Update: `true`},
		"vault_secret_id":   acctest.Representation{RepType: acctest.Required, Create: `${var.secret_id}`, Update: `${var.secret_id_updated}`},
		"vendor_type":       acctest.Representation{RepType: acctest.Optional, Create: `QUALYS`, Update: `QUALYS`},
	}
	hostScanRecipeApplicationSettingsRepresentationQualys = map[string]interface{}{
		"application_scan_recurrence": acctest.Representation{RepType: acctest.Required, Create: `FREQ=WEEKLY;WKST=SU`, Update: `FREQ=WEEKLY;WKST=SU`},
		"folders_to_scan":             acctest.RepresentationGroup{RepType: acctest.Required, Group: hostScanRecipeApplicationSettingsFoldersToScanRepresentationQualys},
		"is_enabled":                  acctest.Representation{RepType: acctest.Required, Create: `false`, Update: `false`},
	}
	hostScanRecipeApplicationSettingsFoldersToScanRepresentationQualys = map[string]interface{}{
		"folder":          acctest.Representation{RepType: acctest.Required, Create: `/`, Update: `/`},
		"operatingsystem": acctest.Representation{RepType: acctest.Required, Create: `LINUX`, Update: `LINUX`},
	}

	HostScanRecipeResourceDependenciesQualys = DefinedTagsDependencies
)

// issue-routing-tag: vulnerability_scanning/default
func TestVulnerabilityScanningHostScanRecipeResource_Qualys_basic(t *testing.T) {
	httpreplay.SetScenario("TestVulnerabilityScanningHostScanRecipeResource_Qualys_basic")
	defer httpreplay.SaveScenario()

	config := acctest.ProviderTestConfig()

	compartmentId := utils.GetEnvSettingWithBlankDefault("compartment_ocid")
	compartmentIdVariableStr := fmt.Sprintf("variable \"compartment_id\" { default = \"%s\" }\n", compartmentId)

	compartmentIdU := utils.GetEnvSettingWithDefault("compartment_id_for_update", compartmentId)
	compartmentIdUVariableStr := fmt.Sprintf("variable \"compartment_id_for_update\" { default = \"%s\" }\n", compartmentIdU)

	secretIdVariableStr := fmt.Sprintf("variable \"secret_id\" { default = \"%s\" }\n", "secret_ocid")

	secretIdUVariableStr := fmt.Sprintf("variable \"secret_id_updated\" { default = \"%s\" }\n", "secret_ocid_updated")

	resourceName := "oci_vulnerability_scanning_host_scan_recipe.test_host_scan_recipe"
	datasourceName := "data.oci_vulnerability_scanning_host_scan_recipes.test_host_scan_recipes"
	singularDatasourceName := "data.oci_vulnerability_scanning_host_scan_recipe.test_host_scan_recipe"

	var resId, resId2 string
	// Save TF content to Create resource with optional properties. This has to be exactly the same as the config part in the "Create with optionals" step in the test.
	acctest.SaveConfigContent(config+compartmentIdVariableStr+secretIdVariableStr+secretIdUVariableStr+HostScanRecipeResourceDependenciesQualys+
		acctest.GenerateResourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipe", "test_host_scan_recipe", acctest.Optional, acctest.Create, VulnerabilityScanningHostScanRecipeRepresentationQualys), "vulnerabilityscanning", "hostScanRecipe", t)

	acctest.ResourceTest(t, testAccCheckVulnerabilityScanningHostScanRecipeQualysDestroy, []resource.TestStep{
		// verify Create
		{
			Config: config + compartmentIdVariableStr + secretIdVariableStr + secretIdUVariableStr + HostScanRecipeResourceDependenciesQualys +
				acctest.GenerateResourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipe", "test_host_scan_recipe", acctest.Required, acctest.Create, VulnerabilityScanningHostScanRecipeRepresentationQualys),
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(resourceName, "agent_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.scan_level", "STANDARD"),
				resource.TestCheckResourceAttr(resourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttr(resourceName, "port_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "port_settings.0.scan_level", "NONE"),
				resource.TestCheckResourceAttr(resourceName, "schedule.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "schedule.0.type", "DAILY"),

				func(s *terraform.State) (err error) {
					resId, err = acctest.FromInstanceState(s, resourceName, "id")
					return err
				},
			),
		},

		// delete before next Create
		{
			Config: config + compartmentIdVariableStr + secretIdVariableStr + secretIdUVariableStr + HostScanRecipeResourceDependenciesQualys,
		},
		// verify Create with optionals
		{
			Config: config + compartmentIdVariableStr + secretIdVariableStr + secretIdUVariableStr + HostScanRecipeResourceDependenciesQualys +
				acctest.GenerateResourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipe", "test_host_scan_recipe", acctest.Optional, acctest.Create, VulnerabilityScanningHostScanRecipeRepresentationQualys),
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(resourceName, "agent_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.should_un_install", "false"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.vault_secret_id", "secret_ocid"),
				//resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.endpoint_protection_settings.#", "0"),
				//resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.endpoint_protection_settings.0.scan_level", "NONE"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.vendor", "QUALYS"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.vendor_type", "QUALYS"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.scan_level", "STANDARD"),
				resource.TestCheckResourceAttr(resourceName, "application_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "application_settings.0.application_scan_recurrence", "FREQ=WEEKLY;WKST=SU"),
				resource.TestCheckResourceAttr(resourceName, "application_settings.0.folders_to_scan.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "application_settings.0.folders_to_scan.0.folder", "/"),
				resource.TestCheckResourceAttr(resourceName, "application_settings.0.folders_to_scan.0.operatingsystem", "LINUX"),
				resource.TestCheckResourceAttr(resourceName, "application_settings.0.is_enabled", "false"),

				resource.TestCheckResourceAttr(resourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttr(resourceName, "display_name", "displayName"),
				resource.TestCheckResourceAttr(resourceName, "freeform_tags.%", "1"),
				resource.TestCheckResourceAttrSet(resourceName, "id"),
				resource.TestCheckResourceAttr(resourceName, "port_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "port_settings.0.scan_level", "NONE"),
				resource.TestCheckResourceAttr(resourceName, "schedule.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "schedule.0.day_of_week", "SUNDAY"),
				resource.TestCheckResourceAttr(resourceName, "schedule.0.type", "DAILY"),
				resource.TestCheckResourceAttrSet(resourceName, "state"),
				resource.TestCheckResourceAttrSet(resourceName, "time_created"),
				resource.TestCheckResourceAttrSet(resourceName, "time_updated"),

				func(s *terraform.State) (err error) {
					resId, err = acctest.FromInstanceState(s, resourceName, "id")
					if isEnableExportCompartment, _ := strconv.ParseBool(utils.GetEnvSettingWithDefault("enable_export_compartment", "true")); isEnableExportCompartment {
						if errExport := resourcediscovery.TestExportCompartmentWithResourceName(&resId, &compartmentId, resourceName); errExport != nil {
							return errExport
						}
					}
					return err
				},
			),
		},

		// verify Update to the compartment (the compartment will be switched back in the next step)
		{
			Config: config + compartmentIdVariableStr + compartmentIdUVariableStr + secretIdVariableStr + secretIdUVariableStr + HostScanRecipeResourceDependenciesQualys +
				acctest.GenerateResourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipe", "test_host_scan_recipe", acctest.Optional, acctest.Create,
					acctest.RepresentationCopyWithNewProperties(VulnerabilityScanningHostScanRecipeRepresentationQualys, map[string]interface{}{
						"compartment_id": acctest.Representation{RepType: acctest.Required, Create: `${var.compartment_id_for_update}`},
					})),
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(resourceName, "agent_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.should_un_install", "false"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.vault_secret_id", "secret_ocid"),
				//resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.endpoint_protection_settings.#", "0"),
				//resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.endpoint_protection_settings.0.scan_level", "NONE"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.vendor", "QUALYS"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.vendor_type", "QUALYS"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.scan_level", "STANDARD"),
				resource.TestCheckResourceAttr(resourceName, "application_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "application_settings.0.application_scan_recurrence", "FREQ=WEEKLY;WKST=SU"),
				resource.TestCheckResourceAttr(resourceName, "application_settings.0.folders_to_scan.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "application_settings.0.folders_to_scan.0.folder", "/"),
				resource.TestCheckResourceAttr(resourceName, "application_settings.0.folders_to_scan.0.operatingsystem", "LINUX"),
				resource.TestCheckResourceAttr(resourceName, "application_settings.0.is_enabled", "false"),
				resource.TestCheckResourceAttr(resourceName, "compartment_id", compartmentIdU),
				resource.TestCheckResourceAttr(resourceName, "display_name", "displayName"),
				resource.TestCheckResourceAttr(resourceName, "freeform_tags.%", "1"),
				resource.TestCheckResourceAttrSet(resourceName, "id"),
				resource.TestCheckResourceAttr(resourceName, "port_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "port_settings.0.scan_level", "NONE"),
				resource.TestCheckResourceAttr(resourceName, "schedule.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "schedule.0.day_of_week", "SUNDAY"),
				resource.TestCheckResourceAttr(resourceName, "schedule.0.type", "DAILY"),
				resource.TestCheckResourceAttrSet(resourceName, "state"),
				resource.TestCheckResourceAttrSet(resourceName, "time_created"),
				resource.TestCheckResourceAttrSet(resourceName, "time_updated"),

				func(s *terraform.State) (err error) {
					resId2, err = acctest.FromInstanceState(s, resourceName, "id")
					if resId != resId2 {
						return fmt.Errorf("resource recreated when it was supposed to be updated")
					}
					return err
				},
			),
		},

		// verify updates to updatable parameters
		{
			Config: config + compartmentIdVariableStr + secretIdVariableStr + secretIdUVariableStr + HostScanRecipeResourceDependenciesQualys +
				acctest.GenerateResourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipe", "test_host_scan_recipe", acctest.Optional, acctest.Update, VulnerabilityScanningHostScanRecipeRepresentationQualys),
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(resourceName, "agent_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.should_un_install", "true"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.vault_secret_id", "secret_ocid_updated"),
				//resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.endpoint_protection_settings.#", "0"),
				//resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.endpoint_protection_settings.0.scan_level", "STANDARD"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.vendor_type", "QUALYS"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.vendor", "QUALYS"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.scan_level", "STANDARD"),
				resource.TestCheckResourceAttr(resourceName, "application_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "application_settings.0.application_scan_recurrence", "FREQ=WEEKLY;WKST=SU"),
				resource.TestCheckResourceAttr(resourceName, "application_settings.0.folders_to_scan.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "application_settings.0.folders_to_scan.0.folder", "/"),
				resource.TestCheckResourceAttr(resourceName, "application_settings.0.folders_to_scan.0.operatingsystem", "LINUX"),
				resource.TestCheckResourceAttr(resourceName, "application_settings.0.is_enabled", "false"),
				resource.TestCheckResourceAttr(resourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttr(resourceName, "display_name", "displayName3"),
				resource.TestCheckResourceAttr(resourceName, "freeform_tags.%", "1"),
				resource.TestCheckResourceAttrSet(resourceName, "id"),
				resource.TestCheckResourceAttr(resourceName, "port_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "port_settings.0.scan_level", "LIGHT"),
				resource.TestCheckResourceAttr(resourceName, "schedule.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "schedule.0.day_of_week", "MONDAY"),
				resource.TestCheckResourceAttr(resourceName, "schedule.0.type", "WEEKLY"),
				resource.TestCheckResourceAttrSet(resourceName, "state"),
				resource.TestCheckResourceAttrSet(resourceName, "time_created"),
				resource.TestCheckResourceAttrSet(resourceName, "time_updated"),

				func(s *terraform.State) (err error) {
					resId2, err = acctest.FromInstanceState(s, resourceName, "id")
					if resId != resId2 {
						return fmt.Errorf("Resource recreated when it was supposed to be updated.")
					}
					return err
				},
			),
		},
		// verify datasource
		{
			Config: config +
				acctest.GenerateDataSourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipes", "test_host_scan_recipes", acctest.Optional, acctest.Update, hostScanRecipeDataSourceRepresentationQualys) +
				compartmentIdVariableStr + secretIdVariableStr + secretIdUVariableStr + HostScanRecipeResourceDependenciesQualys +
				acctest.GenerateResourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipe", "test_host_scan_recipe", acctest.Optional, acctest.Update, VulnerabilityScanningHostScanRecipeRepresentationQualys),
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(datasourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttr(datasourceName, "display_name", "displayName3"),
				resource.TestCheckResourceAttr(datasourceName, "state", "ACTIVE"),

				resource.TestCheckResourceAttr(datasourceName, "host_scan_recipe_summary_collection.#", "1"),
				resource.TestCheckResourceAttr(datasourceName, "host_scan_recipe_summary_collection.0.items.#", "1"),
			),
		},
		// verify singular datasource
		{
			Config: config +
				acctest.GenerateDataSourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipe", "test_host_scan_recipe", acctest.Required, acctest.Create, hostScanRecipeSingularDataSourceRepresentationQualys) +
				compartmentIdVariableStr + secretIdVariableStr + secretIdUVariableStr + HostScanRecipeResourceConfigQualys,
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttrSet(singularDatasourceName, "host_scan_recipe_id"),

				resource.TestCheckResourceAttr(singularDatasourceName, "agent_settings.#", "1"),
				resource.TestCheckResourceAttr(singularDatasourceName, "agent_settings.0.agent_configuration.#", "1"),
				resource.TestCheckResourceAttr(singularDatasourceName, "agent_settings.0.agent_configuration.0.should_un_install", "true"),
				resource.TestCheckResourceAttr(singularDatasourceName, "agent_settings.0.agent_configuration.0.vault_secret_id", "secret_ocid_updated"),
				//resource.TestCheckResourceAttr(singularDatasourceName, "agent_settings.0.agent_configuration.0.endpoint_protection_settings.#", "0"),
				//resource.TestCheckResourceAttr(singularDatasourceName, "agent_settings.0.agent_configuration.0.endpoint_protection_settings.0.scan_level", "STANDARD"),
				resource.TestCheckResourceAttr(singularDatasourceName, "agent_settings.0.agent_configuration.0.vendor_type", "QUALYS"),
				resource.TestCheckResourceAttr(singularDatasourceName, "agent_settings.0.agent_configuration.0.vendor", "QUALYS"),
				resource.TestCheckResourceAttr(singularDatasourceName, "agent_settings.0.scan_level", "STANDARD"),
				resource.TestCheckResourceAttr(singularDatasourceName, "application_settings.#", "1"),
				resource.TestCheckResourceAttr(singularDatasourceName, "application_settings.0.application_scan_recurrence", "FREQ=WEEKLY;WKST=SU"),
				resource.TestCheckResourceAttr(singularDatasourceName, "application_settings.0.folders_to_scan.#", "1"),
				resource.TestCheckResourceAttr(singularDatasourceName, "application_settings.0.folders_to_scan.0.folder", "/"),
				resource.TestCheckResourceAttr(singularDatasourceName, "application_settings.0.folders_to_scan.0.operatingsystem", "LINUX"),
				resource.TestCheckResourceAttr(singularDatasourceName, "application_settings.0.is_enabled", "false"),
				resource.TestCheckResourceAttr(singularDatasourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttr(singularDatasourceName, "display_name", "displayName3"),
				resource.TestCheckResourceAttr(singularDatasourceName, "freeform_tags.%", "1"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "id"),
				resource.TestCheckResourceAttr(singularDatasourceName, "port_settings.#", "1"),
				resource.TestCheckResourceAttr(singularDatasourceName, "port_settings.0.scan_level", "LIGHT"),
				resource.TestCheckResourceAttr(singularDatasourceName, "schedule.#", "1"),
				resource.TestCheckResourceAttr(singularDatasourceName, "schedule.0.day_of_week", "MONDAY"),
				resource.TestCheckResourceAttr(singularDatasourceName, "schedule.0.type", "WEEKLY"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "state"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "time_created"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "time_updated"),
			),
		},
		// verify resource import
		{
			Config:                  config + HostScanRecipeRequiredOnlyResourceQualys,
			ImportState:             true,
			ImportStateVerify:       true,
			ImportStateVerifyIgnore: []string{},
			ResourceName:            resourceName,
		},
	})
}

func testAccCheckVulnerabilityScanningHostScanRecipeQualysDestroy(s *terraform.State) error {
	noResourceFound := true
	client := acctest.TestAccProvider.Meta().(*tf_client.OracleClients).VulnerabilityScanningClient()
	for _, rs := range s.RootModule().Resources {
		if rs.Type == "oci_vulnerability_scanning_host_scan_recipe" {
			noResourceFound = false
			request := oci_vulnerability_scanning.GetHostScanRecipeRequest{}

			tmp := rs.Primary.ID
			request.HostScanRecipeId = &tmp

			request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(true, "vulnerability_scanning")

			response, err := client.GetHostScanRecipe(context.Background(), request)

			if err == nil {
				deletedLifecycleStates := map[string]bool{
					string(oci_vulnerability_scanning.LifecycleStateDeleted): true,
				}
				if _, ok := deletedLifecycleStates[string(response.LifecycleState)]; !ok {
					//resource lifecycle state is not in expected deleted lifecycle states.
					return fmt.Errorf("resource lifecycle state: %s is not in expected deleted lifecycle states", response.LifecycleState)
				}
				//resource lifecycle state is in expected deleted lifecycle states. continue with next one.
				continue
			}

			//Verify that exception is for '404 not found'.
			if failure, isServiceError := common.IsServiceError(err); !isServiceError || failure.GetHTTPStatusCode() != 404 {
				return err
			}
		}
	}
	if noResourceFound {
		return fmt.Errorf("at least one resource was expected from the state file, but could not be found")
	}

	return nil
}

func init() {
	if acctest.DependencyGraph == nil {
		acctest.InitDependencyGraph()
	}
}
