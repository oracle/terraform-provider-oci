package integrationtest

//resource not exposed to user through Terraform, but generated.
//Hence TF team suggested to keep the file commented as codeGen patch build fails if file not present
/*
import (
	"fmt"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/oracle/terraform-provider-oci/httpreplay"
	"github.com/oracle/terraform-provider-oci/internal/acctest"
	"github.com/oracle/terraform-provider-oci/internal/utils"
)

// Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package integrationtest

import (
"fmt"
"testing"

"github.com/hashicorp/terraform-plugin-testing/helper/resource"

"github.com/oracle/terraform-provider-oci/httpreplay"
"github.com/oracle/terraform-provider-oci/internal/acctest"

"github.com/oracle/terraform-provider-oci/internal/utils"
)

var (
	CloudGuardResourceVulnerabilitySingularDataSourceRepresentation = map[string]interface{}{
		"resource_id":       acctest.Representation{RepType: acctest.Required, Create: `${oci_cloud_guard_resource.test_resource.id}`},
		"vulnerability_key": acctest.Representation{RepType: acctest.Required, Create: `{}`},
	}

	CloudGuardResourceVulnerabilityDataSourceRepresentation = map[string]interface{}{
		"resource_id": acctest.Representation{RepType: acctest.Required, Create: `${oci_cloud_guard_resource.test_resource.id}`},
		"cve_id":      acctest.Representation{RepType: acctest.Optional, Create: `${oci_cloud_guard_cve.test_cve.id}`},
		"risk_level":  acctest.Representation{RepType: acctest.Optional, Create: `riskLevel`},
	}

	CloudGuardResourceVulnerabilityResourceConfig = acctest.GenerateDataSourceFromRepresentationMap("oci_cloud_guard_resources", "test_resources", acctest.Required, acctest.Create, CloudGuardResourceDataSourceRepresentation)
)

// issue-routing-tag: cloud_guard/default
func TestCloudGuardResourceVulnerabilityResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardResourceVulnerabilityResource_basic")
	defer httpreplay.SaveScenario()

	config := acctest.ProviderTestConfig()

	compartmentId := utils.GetEnvSettingWithBlankDefault("compartment_ocid")
	compartmentIdVariableStr := fmt.Sprintf("variable \"compartment_id\" { default = \"%s\" }\n", compartmentId)

	datasourceName := "data.oci_cloud_guard_resource_vulnerabilities.test_resource_vulnerabilities"
	singularDatasourceName := "data.oci_cloud_guard_resource_vulnerability.test_resource_vulnerability"

	acctest.SaveConfigContent("", "", "", t)

	acctest.ResourceTest(t, nil, []resource.TestStep{
		// verify datasource
		{
			Config: config +
				acctest.GenerateDataSourceFromRepresentationMap("oci_cloud_guard_resource_vulnerabilities", "test_resource_vulnerabilities", acctest.Required, acctest.Create, CloudGuardResourceVulnerabilityDataSourceRepresentation) +
				compartmentIdVariableStr + CloudGuardResourceVulnerabilityResourceConfig,
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttrSet(datasourceName, "cve_id"),
				resource.TestCheckResourceAttrSet(datasourceName, "resource_id"),
				resource.TestCheckResourceAttr(datasourceName, "risk_level", "riskLevel"),

				resource.TestCheckResourceAttrSet(datasourceName, "resource_vulnerability_collection.#"),
			),
		},
		// verify singular datasource
		{
			Config: config +
				acctest.GenerateDataSourceFromRepresentationMap("oci_cloud_guard_resource_vulnerability", "test_resource_vulnerability", acctest.Required, acctest.Create, CloudGuardResourceVulnerabilitySingularDataSourceRepresentation) +
				compartmentIdVariableStr + CloudGuardResourceVulnerabilityResourceConfig,
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttrSet(singularDatasourceName, "resource_id"),
				resource.TestCheckResourceAttr(singularDatasourceName, "vulnerability_key", "vulnerabilityKey"),

				resource.TestCheckResourceAttrSet(singularDatasourceName, "cvss_score"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "description"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "id"),
				resource.TestCheckResourceAttr(singularDatasourceName, "package_details.#", "1"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "risk_level"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "time_first_detected"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "time_last_detected"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "time_last_modified"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "time_published"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "url"),
			),
		},
	})
}*/
