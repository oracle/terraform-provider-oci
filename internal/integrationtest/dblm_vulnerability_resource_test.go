// Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package integrationtest

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"

	"github.com/oracle/terraform-provider-oci/httpreplay"
	"github.com/oracle/terraform-provider-oci/internal/acctest"

	"github.com/oracle/terraform-provider-oci/internal/utils"
)

var (
	DblmVulnerabilityResourceDataSourceRepresentation = map[string]interface{}{
		"compartment_id":       acctest.Representation{RepType: acctest.Required, Create: `${var.compartment_id}`},
		"cve_id":               acctest.Representation{RepType: acctest.Optional, Create: `${oci_dblm_cve.test_cve.id}`},
		"release":              acctest.Representation{RepType: acctest.Optional, Create: `databaseRelease`},
		"display_name":         acctest.Representation{RepType: acctest.Optional, Create: `displayName`},
		"patch_recommendation": acctest.Representation{RepType: acctest.Optional, Create: []string{`patchRecommendation`}},
		"severity_type":        acctest.Representation{RepType: acctest.Optional, Create: []string{`severityType`}},
		"state":                acctest.Representation{RepType: acctest.Optional, Create: `AVAILABLE`},
	}

	DblmVulnerabilityResourceResourceConfig = ""
)

// issue-routing-tag: dblm/default
func TestDblmVulnerabilityResourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDblmVulnerabilityResourceResource_basic")
	defer httpreplay.SaveScenario()

	config := acctest.ProviderTestConfig()

	compartmentId := utils.GetEnvSettingWithBlankDefault("compartment_ocid")
	compartmentIdVariableStr := fmt.Sprintf("variable \"compartment_id\" { default = \"%s\" }\n", compartmentId)

	datasourceName := "data.oci_dblm_vulnerability_resources.test_vulnerability_resources"

	acctest.SaveConfigContent("", "", "", t)

	acctest.ResourceTest(t, nil, []resource.TestStep{
		// verify datasource
		{
			Config: config +
				acctest.GenerateDataSourceFromRepresentationMap("oci_dblm_vulnerability_resources", "test_vulnerability_resources", acctest.Required, acctest.Create, DblmVulnerabilityResourceDataSourceRepresentation) +
				compartmentIdVariableStr + DblmVulnerabilityResourceResourceConfig,
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(datasourceName, "compartment_id", compartmentId),
				/*resource.TestCheckResourceAttrSet(datasourceName, "cve_id"),
				resource.TestCheckResourceAttr(datasourceName, "release", "databaseRelease"),
				resource.TestCheckResourceAttr(datasourceName, "display_name", "displayName"),
				resource.TestCheckResourceAttr(datasourceName, "patch_recommendations_summary.#", "1"),
				resource.TestCheckResourceAttr(datasourceName, "severity_type.#", "1"),
				resource.TestCheckResourceAttr(datasourceName, "state", "AVAILABLE"),

				resource.TestCheckResourceAttrSet(datasourceName, "vulnerability_resource_collection.#"),
				resource.TestCheckResourceAttr(datasourceName, "vulnerability_resource_collection.0.items.#", "1"),*/
			),
		},
	})
}
