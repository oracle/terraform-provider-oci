// Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package integrationtest

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"

	"github.com/oracle/terraform-provider-oci/httpreplay"
	"github.com/oracle/terraform-provider-oci/internal/acctest"

	"github.com/oracle/terraform-provider-oci/internal/utils"
)

var (
	DblmVulnerabilityVulnerabilityDataSourceRepresentation = map[string]interface{}{
		"compartment_id":   acctest.Representation{RepType: acctest.Required, Create: `${var.compartment_id}`},
		"database_release": acctest.Representation{RepType: acctest.Optional, Create: `databaseRelease`},
		"display_name":     acctest.Representation{RepType: acctest.Optional, Create: `displayName`},
		"resource_id":      acctest.Representation{RepType: acctest.Optional, Create: `${oci_dblm_vulnerability_vulnerabilities.test_vulnerability_vulnerabilities.id}`},
		"search_by":        acctest.Representation{RepType: acctest.Optional, Create: `searchBy`},
		"severity_type":    acctest.Representation{RepType: acctest.Optional, Create: []string{`severityType`}},
		"state":            acctest.Representation{RepType: acctest.Optional, Create: `AVAILABLE`},
	}

	DblmVulnerabilityVulnerabilityResourceConfig = "" //acctest.GenerateDataSourceFromRepresentationMap("oci_dblm_vulnerability_vulnerabilities", "test_vulnerability_vulnerabilities", acctest.Required, acctest.Create, DblmVulnerabilityVulnerabilityDataSourceRepresentation)
)

// issue-routing-tag: dblm/default
func TestDblmVulnerabilityVulnerabilityResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDblmVulnerabilityVulnerabilityResource_basic")
	defer httpreplay.SaveScenario()

	config := acctest.ProviderTestConfig()

	compartmentId := utils.GetEnvSettingWithBlankDefault("compartment_ocid")
	compartmentIdVariableStr := fmt.Sprintf("variable \"compartment_id\" { default = \"%s\" }\n", compartmentId)

	datasourceName := "data.oci_dblm_vulnerability_vulnerabilities.test_vulnerability_vulnerabilities"

	acctest.SaveConfigContent("", "", "", t)

	acctest.ResourceTest(t, nil, []resource.TestStep{
		// verify datasource
		{
			Config: config +
				acctest.GenerateDataSourceFromRepresentationMap("oci_dblm_vulnerability_vulnerabilities", "test_vulnerability_vulnerabilities", acctest.Required, acctest.Create, DblmVulnerabilityVulnerabilityDataSourceRepresentation) +
				compartmentIdVariableStr + DblmVulnerabilityVulnerabilityResourceConfig,
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				/*resource.TestCheckResourceAttr(datasourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttr(datasourceName, "database_release", "databaseRelease"),
				resource.TestCheckResourceAttr(datasourceName, "display_name", "displayName"),
				resource.TestCheckResourceAttrSet(datasourceName, "resource_id"),
				resource.TestCheckResourceAttr(datasourceName, "search_by", "searchBy"),
				resource.TestCheckResourceAttr(datasourceName, "severity_type.#", "1"),
				resource.TestCheckResourceAttr(datasourceName, "state", "AVAILABLE"),*/

				resource.TestCheckResourceAttrSet(datasourceName, "vulnerability_collection.#"),
				resource.TestCheckResourceAttrSet(datasourceName, "vulnerability_collection.0.items.#"),
			),
		},
	})
}
